//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AdventureWorks.Dal.Adapter.HelperClasses;
using AdventureWorks.Dal.Adapter.FactoryClasses;
using AdventureWorks.Dal.Adapter.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AdventureWorks.Dal.Adapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'BillOfMaterial'.<br/><br/></summary>
	[Serializable]
	public partial class BillOfMaterialEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private ProductEntity _product;
		private ProductEntity _product_;
		private UnitMeasureEntity _unitMeasure;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static BillOfMaterialEntityStaticMetaData _staticMetaData = new BillOfMaterialEntityStaticMetaData();
		private static BillOfMaterialRelations _relationsFactory = new BillOfMaterialRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Product</summary>
			public static readonly string Product = "Product";
			/// <summary>Member name Product_</summary>
			public static readonly string Product_ = "Product_";
			/// <summary>Member name UnitMeasure</summary>
			public static readonly string UnitMeasure = "UnitMeasure";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class BillOfMaterialEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public BillOfMaterialEntityStaticMetaData()
			{
				SetEntityCoreInfo("BillOfMaterialEntity", InheritanceHierarchyType.None, false, (int)AdventureWorks.Dal.Adapter.EntityType.BillOfMaterialEntity, typeof(BillOfMaterialEntity), typeof(BillOfMaterialEntityFactory), false);
				AddNavigatorMetaData<BillOfMaterialEntity, ProductEntity>("Product", "BillOfMaterials", (a, b) => a._product = b, a => a._product, (a, b) => a.Product = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticBillOfMaterialRelations.ProductEntityUsingComponentIdStatic, ()=>new BillOfMaterialRelations().ProductEntityUsingComponentId, null, new int[] { (int)BillOfMaterialFieldIndex.ComponentId }, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.ProductEntity);
				AddNavigatorMetaData<BillOfMaterialEntity, ProductEntity>("Product_", "BillOfMaterials_", (a, b) => a._product_ = b, a => a._product_, (a, b) => a.Product_ = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticBillOfMaterialRelations.ProductEntityUsingProductAssemblyIdStatic, ()=>new BillOfMaterialRelations().ProductEntityUsingProductAssemblyId, null, new int[] { (int)BillOfMaterialFieldIndex.ProductAssemblyId }, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.ProductEntity);
				AddNavigatorMetaData<BillOfMaterialEntity, UnitMeasureEntity>("UnitMeasure", "BillOfMaterials", (a, b) => a._unitMeasure = b, a => a._unitMeasure, (a, b) => a.UnitMeasure = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticBillOfMaterialRelations.UnitMeasureEntityUsingUnitMeasureCodeStatic, ()=>new BillOfMaterialRelations().UnitMeasureEntityUsingUnitMeasureCode, null, new int[] { (int)BillOfMaterialFieldIndex.UnitMeasureCode }, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.UnitMeasureEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static BillOfMaterialEntity()
		{
		}

		/// <summary> CTor</summary>
		public BillOfMaterialEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public BillOfMaterialEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this BillOfMaterialEntity</param>
		public BillOfMaterialEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="billOfMaterialsId">PK value for BillOfMaterial which data should be fetched into this BillOfMaterial object</param>
		public BillOfMaterialEntity(System.Int32 billOfMaterialsId) : this(billOfMaterialsId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="billOfMaterialsId">PK value for BillOfMaterial which data should be fetched into this BillOfMaterial object</param>
		/// <param name="validator">The custom validator object for this BillOfMaterialEntity</param>
		public BillOfMaterialEntity(System.Int32 billOfMaterialsId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.BillOfMaterialsId = billOfMaterialsId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected BillOfMaterialEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProduct() { return CreateRelationInfoForNavigator("Product"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Product' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProduct_() { return CreateRelationInfoForNavigator("Product_"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'UnitMeasure' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUnitMeasure() { return CreateRelationInfoForNavigator("UnitMeasure"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this BillOfMaterialEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static BillOfMaterialRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProduct { get { return _staticMetaData.GetPrefetchPathElement("Product", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Product' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProduct_ { get { return _staticMetaData.GetPrefetchPathElement("Product_", CommonEntityBase.CreateEntityCollection<ProductEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'UnitMeasure' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUnitMeasure { get { return _staticMetaData.GetPrefetchPathElement("UnitMeasure", CommonEntityBase.CreateEntityCollection<UnitMeasureEntity>()); } }

		/// <summary>The BillOfMaterialsId property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."BillOfMaterialsID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 BillOfMaterialsId
		{
			get { return (System.Int32)GetValue((int)BillOfMaterialFieldIndex.BillOfMaterialsId, true); }
			set { SetValue((int)BillOfMaterialFieldIndex.BillOfMaterialsId, value); }		}

		/// <summary>The Bomlevel property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."BOMLevel".<br/>Table field type characteristics (type, precision, scale, length): SmallInt, 5, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int16 Bomlevel
		{
			get { return (System.Int16)GetValue((int)BillOfMaterialFieldIndex.Bomlevel, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.Bomlevel, value); }
		}

		/// <summary>The ComponentId property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."ComponentID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ComponentId
		{
			get { return (System.Int32)GetValue((int)BillOfMaterialFieldIndex.ComponentId, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.ComponentId, value); }
		}

		/// <summary>The EndDate property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."EndDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.DateTime> EndDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)BillOfMaterialFieldIndex.EndDate, false); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.EndDate, value); }
		}

		/// <summary>The ModifiedDate property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)BillOfMaterialFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The PerAssemblyQty property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."PerAssemblyQty".<br/>Table field type characteristics (type, precision, scale, length): Decimal, 8, 2, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal PerAssemblyQty
		{
			get { return (System.Decimal)GetValue((int)BillOfMaterialFieldIndex.PerAssemblyQty, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.PerAssemblyQty, value); }
		}

		/// <summary>The ProductAssemblyId property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."ProductAssemblyID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ProductAssemblyId
		{
			get { return (Nullable<System.Int32>)GetValue((int)BillOfMaterialFieldIndex.ProductAssemblyId, false); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.ProductAssemblyId, value); }
		}

		/// <summary>The StartDate property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."StartDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime StartDate
		{
			get { return (System.DateTime)GetValue((int)BillOfMaterialFieldIndex.StartDate, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.StartDate, value); }
		}

		/// <summary>The UnitMeasureCode property of the Entity BillOfMaterial<br/><br/></summary>
		/// <remarks>Mapped on  table field: "BillOfMaterials"."UnitMeasureCode".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 3.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String UnitMeasureCode
		{
			get { return (System.String)GetValue((int)BillOfMaterialFieldIndex.UnitMeasureCode, true); }
			set	{ SetValue((int)BillOfMaterialFieldIndex.UnitMeasureCode, value); }
		}

		/// <summary>Gets / sets related entity of type 'ProductEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductEntity Product
		{
			get { return _product; }
			set { SetSingleRelatedEntityNavigator(value, "Product"); }
		}

		/// <summary>Gets / sets related entity of type 'ProductEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProductEntity Product_
		{
			get { return _product_; }
			set { SetSingleRelatedEntityNavigator(value, "Product_"); }
		}

		/// <summary>Gets / sets related entity of type 'UnitMeasureEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UnitMeasureEntity UnitMeasure
		{
			get { return _unitMeasure; }
			set { SetSingleRelatedEntityNavigator(value, "UnitMeasure"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AdventureWorks.Dal.Adapter
{
	public enum BillOfMaterialFieldIndex
	{
		///<summary>BillOfMaterialsId. </summary>
		BillOfMaterialsId,
		///<summary>Bomlevel. </summary>
		Bomlevel,
		///<summary>ComponentId. </summary>
		ComponentId,
		///<summary>EndDate. </summary>
		EndDate,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>PerAssemblyQty. </summary>
		PerAssemblyQty,
		///<summary>ProductAssemblyId. </summary>
		ProductAssemblyId,
		///<summary>StartDate. </summary>
		StartDate,
		///<summary>UnitMeasureCode. </summary>
		UnitMeasureCode,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AdventureWorks.Dal.Adapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: BillOfMaterial. </summary>
	public partial class BillOfMaterialRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between BillOfMaterialEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: BillOfMaterial.ComponentId - Product.ProductId</summary>
		public virtual IEntityRelation ProductEntityUsingComponentId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Product", false, new[] { ProductFields.ProductId, BillOfMaterialFields.ComponentId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between BillOfMaterialEntity and ProductEntity over the m:1 relation they have, using the relation between the fields: BillOfMaterial.ProductAssemblyId - Product.ProductId</summary>
		public virtual IEntityRelation ProductEntityUsingProductAssemblyId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Product_", false, new[] { ProductFields.ProductId, BillOfMaterialFields.ProductAssemblyId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between BillOfMaterialEntity and UnitMeasureEntity over the m:1 relation they have, using the relation between the fields: BillOfMaterial.UnitMeasureCode - UnitMeasure.UnitMeasureCode</summary>
		public virtual IEntityRelation UnitMeasureEntityUsingUnitMeasureCode
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "UnitMeasure", false, new[] { UnitMeasureFields.UnitMeasureCode, BillOfMaterialFields.UnitMeasureCode }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticBillOfMaterialRelations
	{
		internal static readonly IEntityRelation ProductEntityUsingComponentIdStatic = new BillOfMaterialRelations().ProductEntityUsingComponentId;
		internal static readonly IEntityRelation ProductEntityUsingProductAssemblyIdStatic = new BillOfMaterialRelations().ProductEntityUsingProductAssemblyId;
		internal static readonly IEntityRelation UnitMeasureEntityUsingUnitMeasureCodeStatic = new BillOfMaterialRelations().UnitMeasureEntityUsingUnitMeasureCode;

		/// <summary>CTor</summary>
		static StaticBillOfMaterialRelations() { }
	}
}

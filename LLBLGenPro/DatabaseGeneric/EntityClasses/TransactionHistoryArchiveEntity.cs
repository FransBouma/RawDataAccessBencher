//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AdventureWorks.Dal.Adapter.HelperClasses;
using AdventureWorks.Dal.Adapter.FactoryClasses;
using AdventureWorks.Dal.Adapter.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AdventureWorks.Dal.Adapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'TransactionHistoryArchive'.<br/><br/></summary>
	[Serializable]
	public partial class TransactionHistoryArchiveEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static TransactionHistoryArchiveEntityStaticMetaData _staticMetaData = new TransactionHistoryArchiveEntityStaticMetaData();
		private static TransactionHistoryArchiveRelations _relationsFactory = new TransactionHistoryArchiveRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class TransactionHistoryArchiveEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public TransactionHistoryArchiveEntityStaticMetaData()
			{
				SetEntityCoreInfo("TransactionHistoryArchiveEntity", InheritanceHierarchyType.None, false, (int)AdventureWorks.Dal.Adapter.EntityType.TransactionHistoryArchiveEntity, typeof(TransactionHistoryArchiveEntity), typeof(TransactionHistoryArchiveEntityFactory), false);
			}
		}

		/// <summary>Static ctor</summary>
		static TransactionHistoryArchiveEntity()
		{
		}

		/// <summary> CTor</summary>
		public TransactionHistoryArchiveEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public TransactionHistoryArchiveEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this TransactionHistoryArchiveEntity</param>
		public TransactionHistoryArchiveEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="transactionId">PK value for TransactionHistoryArchive which data should be fetched into this TransactionHistoryArchive object</param>
		public TransactionHistoryArchiveEntity(System.Int32 transactionId) : this(transactionId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="transactionId">PK value for TransactionHistoryArchive which data should be fetched into this TransactionHistoryArchive object</param>
		/// <param name="validator">The custom validator object for this TransactionHistoryArchiveEntity</param>
		public TransactionHistoryArchiveEntity(System.Int32 transactionId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.TransactionId = transactionId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected TransactionHistoryArchiveEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this TransactionHistoryArchiveEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static TransactionHistoryArchiveRelations Relations { get { return _relationsFactory; } }

		/// <summary>The ActualCost property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."ActualCost".<br/>Table field type characteristics (type, precision, scale, length): Money, 19, 4, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Decimal ActualCost
		{
			get { return (System.Decimal)GetValue((int)TransactionHistoryArchiveFieldIndex.ActualCost, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.ActualCost, value); }
		}

		/// <summary>The ModifiedDate property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)TransactionHistoryArchiveFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The ProductId property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."ProductID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ProductId
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryArchiveFieldIndex.ProductId, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.ProductId, value); }
		}

		/// <summary>The Quantity property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."Quantity".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 Quantity
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryArchiveFieldIndex.Quantity, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.Quantity, value); }
		}

		/// <summary>The ReferenceOrderId property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."ReferenceOrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ReferenceOrderId
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryArchiveFieldIndex.ReferenceOrderId, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.ReferenceOrderId, value); }
		}

		/// <summary>The ReferenceOrderLineId property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."ReferenceOrderLineID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 ReferenceOrderLineId
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryArchiveFieldIndex.ReferenceOrderLineId, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.ReferenceOrderLineId, value); }
		}

		/// <summary>The TransactionDate property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."TransactionDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime TransactionDate
		{
			get { return (System.DateTime)GetValue((int)TransactionHistoryArchiveFieldIndex.TransactionDate, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.TransactionDate, value); }
		}

		/// <summary>The TransactionId property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."TransactionID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 TransactionId
		{
			get { return (System.Int32)GetValue((int)TransactionHistoryArchiveFieldIndex.TransactionId, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.TransactionId, value); }
		}

		/// <summary>The TransactionType property of the Entity TransactionHistoryArchive<br/><br/></summary>
		/// <remarks>Mapped on  table field: "TransactionHistoryArchive"."TransactionType".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 1.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String TransactionType
		{
			get { return (System.String)GetValue((int)TransactionHistoryArchiveFieldIndex.TransactionType, true); }
			set	{ SetValue((int)TransactionHistoryArchiveFieldIndex.TransactionType, value); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AdventureWorks.Dal.Adapter
{
	public enum TransactionHistoryArchiveFieldIndex
	{
		///<summary>ActualCost. </summary>
		ActualCost,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>ProductId. </summary>
		ProductId,
		///<summary>Quantity. </summary>
		Quantity,
		///<summary>ReferenceOrderId. </summary>
		ReferenceOrderId,
		///<summary>ReferenceOrderLineId. </summary>
		ReferenceOrderLineId,
		///<summary>TransactionDate. </summary>
		TransactionDate,
		///<summary>TransactionId. </summary>
		TransactionId,
		///<summary>TransactionType. </summary>
		TransactionType,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AdventureWorks.Dal.Adapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: TransactionHistoryArchive. </summary>
	public partial class TransactionHistoryArchiveRelations: RelationFactory
	{

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticTransactionHistoryArchiveRelations
	{

		/// <summary>CTor</summary>
		static StaticTransactionHistoryArchiveRelations() { }
	}
}

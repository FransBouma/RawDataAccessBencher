//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AdventureWorks.Dal.Adapter.HelperClasses;
using AdventureWorks.Dal.Adapter.FactoryClasses;
using AdventureWorks.Dal.Adapter.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AdventureWorks.Dal.Adapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Person'.<br/><br/></summary>
	[Serializable]
	public partial class PersonEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<BusinessEntityContactEntity> _businessEntityContacts;
		private EntityCollection<ContactCreditCardEntity> _contactCreditCards;
		private EntityCollection<CustomerEntity> _customers;
		private EntityCollection<EmailAddressEntity> _emailAddresses;
		private EntityCollection<PersonPhoneEntity> _personPhones;
		private BusinessEntityEntity _businessEntity;
		private EmployeeEntity _employee;
		private PasswordEntity _password;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static PersonEntityStaticMetaData _staticMetaData = new PersonEntityStaticMetaData();
		private static PersonRelations _relationsFactory = new PersonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name BusinessEntityContacts</summary>
			public static readonly string BusinessEntityContacts = "BusinessEntityContacts";
			/// <summary>Member name ContactCreditCards</summary>
			public static readonly string ContactCreditCards = "ContactCreditCards";
			/// <summary>Member name Customers</summary>
			public static readonly string Customers = "Customers";
			/// <summary>Member name EmailAddresses</summary>
			public static readonly string EmailAddresses = "EmailAddresses";
			/// <summary>Member name PersonPhones</summary>
			public static readonly string PersonPhones = "PersonPhones";
			/// <summary>Member name BusinessEntity</summary>
			public static readonly string BusinessEntity = "BusinessEntity";
			/// <summary>Member name Employee</summary>
			public static readonly string Employee = "Employee";
			/// <summary>Member name Password</summary>
			public static readonly string Password = "Password";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PersonEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PersonEntityStaticMetaData()
			{
				SetEntityCoreInfo("PersonEntity", InheritanceHierarchyType.None, false, (int)AdventureWorks.Dal.Adapter.EntityType.PersonEntity, typeof(PersonEntity), typeof(PersonEntityFactory), false);
				AddNavigatorMetaData<PersonEntity, EntityCollection<BusinessEntityContactEntity>>("BusinessEntityContacts", a => a._businessEntityContacts, (a, b) => a._businessEntityContacts = b, a => a.BusinessEntityContacts, () => new PersonRelations().BusinessEntityContactEntityUsingPersonId, typeof(BusinessEntityContactEntity), (int)AdventureWorks.Dal.Adapter.EntityType.BusinessEntityContactEntity);
				AddNavigatorMetaData<PersonEntity, EntityCollection<ContactCreditCardEntity>>("ContactCreditCards", a => a._contactCreditCards, (a, b) => a._contactCreditCards = b, a => a.ContactCreditCards, () => new PersonRelations().ContactCreditCardEntityUsingContactId, typeof(ContactCreditCardEntity), (int)AdventureWorks.Dal.Adapter.EntityType.ContactCreditCardEntity);
				AddNavigatorMetaData<PersonEntity, EntityCollection<CustomerEntity>>("Customers", a => a._customers, (a, b) => a._customers = b, a => a.Customers, () => new PersonRelations().CustomerEntityUsingPersonId, typeof(CustomerEntity), (int)AdventureWorks.Dal.Adapter.EntityType.CustomerEntity);
				AddNavigatorMetaData<PersonEntity, EntityCollection<EmailAddressEntity>>("EmailAddresses", a => a._emailAddresses, (a, b) => a._emailAddresses = b, a => a.EmailAddresses, () => new PersonRelations().EmailAddressEntityUsingBusinessEntityId, typeof(EmailAddressEntity), (int)AdventureWorks.Dal.Adapter.EntityType.EmailAddressEntity);
				AddNavigatorMetaData<PersonEntity, EntityCollection<PersonPhoneEntity>>("PersonPhones", a => a._personPhones, (a, b) => a._personPhones = b, a => a.PersonPhones, () => new PersonRelations().PersonPhoneEntityUsingBusinessEntityId, typeof(PersonPhoneEntity), (int)AdventureWorks.Dal.Adapter.EntityType.PersonPhoneEntity);
				AddNavigatorMetaData<PersonEntity, BusinessEntityEntity>("BusinessEntity", "Person", (a, b) => a._businessEntity = b, a => a._businessEntity, (a, b) => a.BusinessEntity = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticPersonRelations.BusinessEntityEntityUsingBusinessEntityIdStatic, ()=>new PersonRelations().BusinessEntityEntityUsingBusinessEntityId, null, new int[] { (int)PersonFieldIndex.BusinessEntityId }, null, false, (int)AdventureWorks.Dal.Adapter.EntityType.BusinessEntityEntity);
				AddNavigatorMetaData<PersonEntity, EmployeeEntity>("Employee", "Person", (a, b) => a._employee = b, a => a._employee, (a, b) => a.Employee = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticPersonRelations.EmployeeEntityUsingEmployeeIdStatic, ()=>new PersonRelations().EmployeeEntityUsingEmployeeId, null, null, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.EmployeeEntity);
				AddNavigatorMetaData<PersonEntity, PasswordEntity>("Password", "Person", (a, b) => a._password = b, a => a._password, (a, b) => a.Password = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticPersonRelations.PasswordEntityUsingBusinessEntityIdStatic, ()=>new PersonRelations().PasswordEntityUsingBusinessEntityId, null, null, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.PasswordEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PersonEntity()
		{
		}

		/// <summary> CTor</summary>
		public PersonEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PersonEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="businessEntityId">PK value for Person which data should be fetched into this Person object</param>
		public PersonEntity(System.Int32 businessEntityId) : this(businessEntityId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="businessEntityId">PK value for Person which data should be fetched into this Person object</param>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(System.Int32 businessEntityId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.BusinessEntityId = businessEntityId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PersonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'BusinessEntityContact' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBusinessEntityContacts() { return CreateRelationInfoForNavigator("BusinessEntityContacts"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ContactCreditCard' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoContactCreditCards() { return CreateRelationInfoForNavigator("ContactCreditCards"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Customer' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoCustomers() { return CreateRelationInfoForNavigator("Customers"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'EmailAddress' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmailAddresses() { return CreateRelationInfoForNavigator("EmailAddresses"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'PersonPhone' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPersonPhones() { return CreateRelationInfoForNavigator("PersonPhones"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'BusinessEntity' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoBusinessEntity() { return CreateRelationInfoForNavigator("BusinessEntity"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Employee' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoEmployee() { return CreateRelationInfoForNavigator("Employee"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Password' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoPassword() { return CreateRelationInfoForNavigator("Password"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PersonEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PersonRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'BusinessEntityContact' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBusinessEntityContacts { get { return _staticMetaData.GetPrefetchPathElement("BusinessEntityContacts", CommonEntityBase.CreateEntityCollection<BusinessEntityContactEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ContactCreditCard' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathContactCreditCards { get { return _staticMetaData.GetPrefetchPathElement("ContactCreditCards", CommonEntityBase.CreateEntityCollection<ContactCreditCardEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Customer' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathCustomers { get { return _staticMetaData.GetPrefetchPathElement("Customers", CommonEntityBase.CreateEntityCollection<CustomerEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'EmailAddress' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmailAddresses { get { return _staticMetaData.GetPrefetchPathElement("EmailAddresses", CommonEntityBase.CreateEntityCollection<EmailAddressEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'PersonPhone' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPersonPhones { get { return _staticMetaData.GetPrefetchPathElement("PersonPhones", CommonEntityBase.CreateEntityCollection<PersonPhoneEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'BusinessEntity' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathBusinessEntity { get { return _staticMetaData.GetPrefetchPathElement("BusinessEntity", CommonEntityBase.CreateEntityCollection<BusinessEntityEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Employee' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathEmployee { get { return _staticMetaData.GetPrefetchPathElement("Employee", CommonEntityBase.CreateEntityCollection<EmployeeEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Password' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathPassword { get { return _staticMetaData.GetPrefetchPathElement("Password", CommonEntityBase.CreateEntityCollection<PasswordEntity>()); } }

		/// <summary>The AdditionalContactInfo property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."AdditionalContactInfo".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String AdditionalContactInfo
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.AdditionalContactInfo, true); }
			set	{ SetValue((int)PersonFieldIndex.AdditionalContactInfo, value); }
		}

		/// <summary>The BusinessEntityId property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."BusinessEntityID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 BusinessEntityId
		{
			get { return (System.Int32)GetValue((int)PersonFieldIndex.BusinessEntityId, true); }
			set	{ SetValue((int)PersonFieldIndex.BusinessEntityId, value); }
		}

		/// <summary>The Demographics property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Demographics".<br/>Table field type characteristics (type, precision, scale, length): Xml, 0, 0, 2147483647.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Demographics
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Demographics, true); }
			set	{ SetValue((int)PersonFieldIndex.Demographics, value); }
		}

		/// <summary>The EmailPromotion property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."EmailPromotion".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 EmailPromotion
		{
			get { return (System.Int32)GetValue((int)PersonFieldIndex.EmailPromotion, true); }
			set	{ SetValue((int)PersonFieldIndex.EmailPromotion, value); }
		}

		/// <summary>The FirstName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."FirstName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String FirstName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.FirstName, true); }
			set	{ SetValue((int)PersonFieldIndex.FirstName, value); }
		}

		/// <summary>The LastName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."LastName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.LastName, true); }
			set	{ SetValue((int)PersonFieldIndex.LastName, value); }
		}

		/// <summary>The MiddleName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."MiddleName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String MiddleName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.MiddleName, true); }
			set	{ SetValue((int)PersonFieldIndex.MiddleName, value); }
		}

		/// <summary>The ModifiedDate property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)PersonFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)PersonFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The NameStyle property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."NameStyle".<br/>Table field type characteristics (type, precision, scale, length): Bit, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean NameStyle
		{
			get { return (System.Boolean)GetValue((int)PersonFieldIndex.NameStyle, true); }
			set	{ SetValue((int)PersonFieldIndex.NameStyle, value); }
		}

		/// <summary>The PersonType property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."PersonType".<br/>Table field type characteristics (type, precision, scale, length): NChar, 0, 0, 2.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String PersonType
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.PersonType, true); }
			set	{ SetValue((int)PersonFieldIndex.PersonType, value); }
		}

		/// <summary>The Rowguid property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."rowguid".<br/>Table field type characteristics (type, precision, scale, length): UniqueIdentifier, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid Rowguid
		{
			get { return (System.Guid)GetValue((int)PersonFieldIndex.Rowguid, true); }
			set	{ SetValue((int)PersonFieldIndex.Rowguid, value); }
		}

		/// <summary>The Suffix property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Suffix".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 10.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Suffix
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Suffix, true); }
			set	{ SetValue((int)PersonFieldIndex.Suffix, value); }
		}

		/// <summary>The Title property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Title".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 8.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Title, true); }
			set	{ SetValue((int)PersonFieldIndex.Title, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'BusinessEntityContactEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(BusinessEntityContactEntity))]
		public virtual EntityCollection<BusinessEntityContactEntity> BusinessEntityContacts { get { return GetOrCreateEntityCollection<BusinessEntityContactEntity, BusinessEntityContactEntityFactory>("Person", true, false, ref _businessEntityContacts); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'ContactCreditCardEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ContactCreditCardEntity))]
		public virtual EntityCollection<ContactCreditCardEntity> ContactCreditCards { get { return GetOrCreateEntityCollection<ContactCreditCardEntity, ContactCreditCardEntityFactory>("Person", true, false, ref _contactCreditCards); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'CustomerEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(CustomerEntity))]
		public virtual EntityCollection<CustomerEntity> Customers { get { return GetOrCreateEntityCollection<CustomerEntity, CustomerEntityFactory>("Person", true, false, ref _customers); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'EmailAddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(EmailAddressEntity))]
		public virtual EntityCollection<EmailAddressEntity> EmailAddresses { get { return GetOrCreateEntityCollection<EmailAddressEntity, EmailAddressEntityFactory>("Person", true, false, ref _emailAddresses); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'PersonPhoneEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(PersonPhoneEntity))]
		public virtual EntityCollection<PersonPhoneEntity> PersonPhones { get { return GetOrCreateEntityCollection<PersonPhoneEntity, PersonPhoneEntityFactory>("Person", true, false, ref _personPhones); } }

		/// <summary>Gets / sets related entity of type 'BusinessEntityEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/></summary>
		[Browsable(false)]
		public virtual BusinessEntityEntity BusinessEntity
		{
			get { return _businessEntity; }
			set { SetSingleRelatedEntityNavigator(value, "BusinessEntity"); }
		}

		/// <summary>Gets / sets related entity of type 'EmployeeEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/></summary>
		[Browsable(false)]
		public virtual EmployeeEntity Employee
		{
			get { return _employee; }
			set { SetSingleRelatedEntityNavigator(value, "Employee"); }
		}

		/// <summary>Gets / sets related entity of type 'PasswordEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned.<br/><br/></summary>
		[Browsable(false)]
		public virtual PasswordEntity Password
		{
			get { return _password; }
			set { SetSingleRelatedEntityNavigator(value, "Password"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AdventureWorks.Dal.Adapter
{
	public enum PersonFieldIndex
	{
		///<summary>AdditionalContactInfo. </summary>
		AdditionalContactInfo,
		///<summary>BusinessEntityId. </summary>
		BusinessEntityId,
		///<summary>Demographics. </summary>
		Demographics,
		///<summary>EmailPromotion. </summary>
		EmailPromotion,
		///<summary>FirstName. </summary>
		FirstName,
		///<summary>LastName. </summary>
		LastName,
		///<summary>MiddleName. </summary>
		MiddleName,
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>NameStyle. </summary>
		NameStyle,
		///<summary>PersonType. </summary>
		PersonType,
		///<summary>Rowguid. </summary>
		Rowguid,
		///<summary>Suffix. </summary>
		Suffix,
		///<summary>Title. </summary>
		Title,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AdventureWorks.Dal.Adapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Person. </summary>
	public partial class PersonRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PersonEntity and BusinessEntityContactEntity over the 1:n relation they have, using the relation between the fields: Person.BusinessEntityId - BusinessEntityContact.PersonId</summary>
		public virtual IEntityRelation BusinessEntityContactEntityUsingPersonId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "BusinessEntityContacts", true, new[] { PersonFields.BusinessEntityId, BusinessEntityContactFields.PersonId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and ContactCreditCardEntity over the 1:n relation they have, using the relation between the fields: Person.BusinessEntityId - ContactCreditCard.ContactId</summary>
		public virtual IEntityRelation ContactCreditCardEntityUsingContactId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ContactCreditCards", true, new[] { PersonFields.BusinessEntityId, ContactCreditCardFields.ContactId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and CustomerEntity over the 1:n relation they have, using the relation between the fields: Person.BusinessEntityId - Customer.PersonId</summary>
		public virtual IEntityRelation CustomerEntityUsingPersonId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Customers", true, new[] { PersonFields.BusinessEntityId, CustomerFields.PersonId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and EmailAddressEntity over the 1:n relation they have, using the relation between the fields: Person.BusinessEntityId - EmailAddress.BusinessEntityId</summary>
		public virtual IEntityRelation EmailAddressEntityUsingBusinessEntityId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "EmailAddresses", true, new[] { PersonFields.BusinessEntityId, EmailAddressFields.BusinessEntityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and PersonPhoneEntity over the 1:n relation they have, using the relation between the fields: Person.BusinessEntityId - PersonPhone.BusinessEntityId</summary>
		public virtual IEntityRelation PersonPhoneEntityUsingBusinessEntityId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "PersonPhones", true, new[] { PersonFields.BusinessEntityId, PersonPhoneFields.BusinessEntityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and BusinessEntityEntity over the 1:1 relation they have, using the relation between the fields: Person.BusinessEntityId - BusinessEntity.BusinessEntityId</summary>
		public virtual IEntityRelation BusinessEntityEntityUsingBusinessEntityId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToOne, "BusinessEntity", false, new[] { BusinessEntityFields.BusinessEntityId, PersonFields.BusinessEntityId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and EmployeeEntity over the 1:1 relation they have, using the relation between the fields: Person.BusinessEntityId - Employee.EmployeeId</summary>
		public virtual IEntityRelation EmployeeEntityUsingEmployeeId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToOne, "Employee", true, new[] { PersonFields.BusinessEntityId, EmployeeFields.EmployeeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between PersonEntity and PasswordEntity over the 1:1 relation they have, using the relation between the fields: Person.BusinessEntityId - Password.BusinessEntityId</summary>
		public virtual IEntityRelation PasswordEntityUsingBusinessEntityId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToOne, "Password", true, new[] { PersonFields.BusinessEntityId, PasswordFields.BusinessEntityId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPersonRelations
	{
		internal static readonly IEntityRelation BusinessEntityContactEntityUsingPersonIdStatic = new PersonRelations().BusinessEntityContactEntityUsingPersonId;
		internal static readonly IEntityRelation ContactCreditCardEntityUsingContactIdStatic = new PersonRelations().ContactCreditCardEntityUsingContactId;
		internal static readonly IEntityRelation CustomerEntityUsingPersonIdStatic = new PersonRelations().CustomerEntityUsingPersonId;
		internal static readonly IEntityRelation EmailAddressEntityUsingBusinessEntityIdStatic = new PersonRelations().EmailAddressEntityUsingBusinessEntityId;
		internal static readonly IEntityRelation PersonPhoneEntityUsingBusinessEntityIdStatic = new PersonRelations().PersonPhoneEntityUsingBusinessEntityId;
		internal static readonly IEntityRelation BusinessEntityEntityUsingBusinessEntityIdStatic = new PersonRelations().BusinessEntityEntityUsingBusinessEntityId;
		internal static readonly IEntityRelation EmployeeEntityUsingEmployeeIdStatic = new PersonRelations().EmployeeEntityUsingEmployeeId;
		internal static readonly IEntityRelation PasswordEntityUsingBusinessEntityIdStatic = new PersonRelations().PasswordEntityUsingBusinessEntityId;

		/// <summary>CTor</summary>
		static StaticPersonRelations() { }
	}
}

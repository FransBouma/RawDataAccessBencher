//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AdventureWorks.Dal.Adapter.HelperClasses;
using AdventureWorks.Dal.Adapter.FactoryClasses;
using AdventureWorks.Dal.Adapter.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AdventureWorks.Dal.Adapter.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'SalesOrderHeaderSalesReason'.<br/><br/></summary>
	[Serializable]
	public partial class SalesOrderHeaderSalesReasonEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private SalesOrderHeaderEntity _salesOrderHeader;
		private SalesReasonEntity _salesReason;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static SalesOrderHeaderSalesReasonEntityStaticMetaData _staticMetaData = new SalesOrderHeaderSalesReasonEntityStaticMetaData();
		private static SalesOrderHeaderSalesReasonRelations _relationsFactory = new SalesOrderHeaderSalesReasonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name SalesOrderHeader</summary>
			public static readonly string SalesOrderHeader = "SalesOrderHeader";
			/// <summary>Member name SalesReason</summary>
			public static readonly string SalesReason = "SalesReason";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class SalesOrderHeaderSalesReasonEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public SalesOrderHeaderSalesReasonEntityStaticMetaData()
			{
				SetEntityCoreInfo("SalesOrderHeaderSalesReasonEntity", InheritanceHierarchyType.None, false, (int)AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderSalesReasonEntity, typeof(SalesOrderHeaderSalesReasonEntity), typeof(SalesOrderHeaderSalesReasonEntityFactory), false);
				AddNavigatorMetaData<SalesOrderHeaderSalesReasonEntity, SalesOrderHeaderEntity>("SalesOrderHeader", "SalesOrderHeaderSalesReasons", (a, b) => a._salesOrderHeader = b, a => a._salesOrderHeader, (a, b) => a.SalesOrderHeader = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticSalesOrderHeaderSalesReasonRelations.SalesOrderHeaderEntityUsingSalesOrderIdStatic, ()=>new SalesOrderHeaderSalesReasonRelations().SalesOrderHeaderEntityUsingSalesOrderId, null, new int[] { (int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderId }, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderEntity);
				AddNavigatorMetaData<SalesOrderHeaderSalesReasonEntity, SalesReasonEntity>("SalesReason", "SalesOrderHeaderSalesReasons", (a, b) => a._salesReason = b, a => a._salesReason, (a, b) => a.SalesReason = b, AdventureWorks.Dal.Adapter.RelationClasses.StaticSalesOrderHeaderSalesReasonRelations.SalesReasonEntityUsingSalesReasonIdStatic, ()=>new SalesOrderHeaderSalesReasonRelations().SalesReasonEntityUsingSalesReasonId, null, new int[] { (int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonId }, null, true, (int)AdventureWorks.Dal.Adapter.EntityType.SalesReasonEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static SalesOrderHeaderSalesReasonEntity()
		{
		}

		/// <summary> CTor</summary>
		public SalesOrderHeaderSalesReasonEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public SalesOrderHeaderSalesReasonEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderSalesReasonEntity</param>
		public SalesOrderHeaderSalesReasonEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderId">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="salesReasonId">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		public SalesOrderHeaderSalesReasonEntity(System.Int32 salesOrderId, System.Int32 salesReasonId) : this(salesOrderId, salesReasonId, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="salesOrderId">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="salesReasonId">PK value for SalesOrderHeaderSalesReason which data should be fetched into this SalesOrderHeaderSalesReason object</param>
		/// <param name="validator">The custom validator object for this SalesOrderHeaderSalesReasonEntity</param>
		public SalesOrderHeaderSalesReasonEntity(System.Int32 salesOrderId, System.Int32 salesReasonId, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.SalesOrderId = salesOrderId;
			this.SalesReasonId = salesReasonId;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected SalesOrderHeaderSalesReasonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesOrderHeader' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesOrderHeader() { return CreateRelationInfoForNavigator("SalesOrderHeader"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'SalesReason' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoSalesReason() { return CreateRelationInfoForNavigator("SalesReason"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this SalesOrderHeaderSalesReasonEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static SalesOrderHeaderSalesReasonRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesOrderHeader' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesOrderHeader { get { return _staticMetaData.GetPrefetchPathElement("SalesOrderHeader", CommonEntityBase.CreateEntityCollection<SalesOrderHeaderEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'SalesReason' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathSalesReason { get { return _staticMetaData.GetPrefetchPathElement("SalesReason", CommonEntityBase.CreateEntityCollection<SalesReasonEntity>()); } }

		/// <summary>The ModifiedDate property of the Entity SalesOrderHeaderSalesReason<br/><br/></summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."ModifiedDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime ModifiedDate
		{
			get { return (System.DateTime)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.ModifiedDate, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.ModifiedDate, value); }
		}

		/// <summary>The SalesOrderId property of the Entity SalesOrderHeaderSalesReason<br/><br/></summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."SalesOrderID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 SalesOrderId
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderId, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesOrderId, value); }
		}

		/// <summary>The SalesReasonId property of the Entity SalesOrderHeaderSalesReason<br/><br/></summary>
		/// <remarks>Mapped on  table field: "SalesOrderHeaderSalesReason"."SalesReasonID".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Int32 SalesReasonId
		{
			get { return (System.Int32)GetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonId, true); }
			set	{ SetValue((int)SalesOrderHeaderSalesReasonFieldIndex.SalesReasonId, value); }
		}

		/// <summary>Gets / sets related entity of type 'SalesOrderHeaderEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesOrderHeaderEntity SalesOrderHeader
		{
			get { return _salesOrderHeader; }
			set { SetSingleRelatedEntityNavigator(value, "SalesOrderHeader"); }
		}

		/// <summary>Gets / sets related entity of type 'SalesReasonEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual SalesReasonEntity SalesReason
		{
			get { return _salesReason; }
			set { SetSingleRelatedEntityNavigator(value, "SalesReason"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace AdventureWorks.Dal.Adapter
{
	public enum SalesOrderHeaderSalesReasonFieldIndex
	{
		///<summary>ModifiedDate. </summary>
		ModifiedDate,
		///<summary>SalesOrderId. </summary>
		SalesOrderId,
		///<summary>SalesReasonId. </summary>
		SalesReasonId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AdventureWorks.Dal.Adapter.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: SalesOrderHeaderSalesReason. </summary>
	public partial class SalesOrderHeaderSalesReasonRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderSalesReasonEntity and SalesOrderHeaderEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeaderSalesReason.SalesOrderId - SalesOrderHeader.SalesOrderId</summary>
		public virtual IEntityRelation SalesOrderHeaderEntityUsingSalesOrderId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesOrderHeader", false, new[] { SalesOrderHeaderFields.SalesOrderId, SalesOrderHeaderSalesReasonFields.SalesOrderId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between SalesOrderHeaderSalesReasonEntity and SalesReasonEntity over the m:1 relation they have, using the relation between the fields: SalesOrderHeaderSalesReason.SalesReasonId - SalesReason.SalesReasonId</summary>
		public virtual IEntityRelation SalesReasonEntityUsingSalesReasonId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "SalesReason", false, new[] { SalesReasonFields.SalesReasonId, SalesOrderHeaderSalesReasonFields.SalesReasonId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticSalesOrderHeaderSalesReasonRelations
	{
		internal static readonly IEntityRelation SalesOrderHeaderEntityUsingSalesOrderIdStatic = new SalesOrderHeaderSalesReasonRelations().SalesOrderHeaderEntityUsingSalesOrderId;
		internal static readonly IEntityRelation SalesReasonEntityUsingSalesReasonIdStatic = new SalesOrderHeaderSalesReasonRelations().SalesReasonEntityUsingSalesReasonId;

		/// <summary>CTor</summary>
		static StaticSalesOrderHeaderSalesReasonRelations() { }
	}
}

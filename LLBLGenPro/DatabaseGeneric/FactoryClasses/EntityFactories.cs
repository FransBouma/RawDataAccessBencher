//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.7.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using AdventureWorks.Dal.Adapter.EntityClasses;
using AdventureWorks.Dal.Adapter.HelperClasses;
using AdventureWorks.Dal.Adapter.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AdventureWorks.Dal.Adapter.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly AdventureWorks.Dal.Adapter.EntityType _typeOfEntity;
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, AdventureWorks.Dal.Adapter.EntityType typeOfEntity, bool isInHierarchy) : base(entityName)
		{
			_typeOfEntity = typeOfEntity;
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((AdventureWorks.Dal.Adapter.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty AddressEntity objects.</summary>
	[Serializable]
	public partial class AddressEntityFactory : EntityFactoryBase2<AddressEntity> 
	{
		/// <summary>CTor</summary>
		public AddressEntityFactory() : base("AddressEntity", AdventureWorks.Dal.Adapter.EntityType.AddressEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AddressEntity(fields); }
	}

	/// <summary>Factory to create new, empty AddressTypeEntity objects.</summary>
	[Serializable]
	public partial class AddressTypeEntityFactory : EntityFactoryBase2<AddressTypeEntity> 
	{
		/// <summary>CTor</summary>
		public AddressTypeEntityFactory() : base("AddressTypeEntity", AdventureWorks.Dal.Adapter.EntityType.AddressTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AddressTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty BillOfMaterialEntity objects.</summary>
	[Serializable]
	public partial class BillOfMaterialEntityFactory : EntityFactoryBase2<BillOfMaterialEntity> 
	{
		/// <summary>CTor</summary>
		public BillOfMaterialEntityFactory() : base("BillOfMaterialEntity", AdventureWorks.Dal.Adapter.EntityType.BillOfMaterialEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new BillOfMaterialEntity(fields); }
	}

	/// <summary>Factory to create new, empty BusinessEntityEntity objects.</summary>
	[Serializable]
	public partial class BusinessEntityEntityFactory : EntityFactoryBase2<BusinessEntityEntity> 
	{
		/// <summary>CTor</summary>
		public BusinessEntityEntityFactory() : base("BusinessEntityEntity", AdventureWorks.Dal.Adapter.EntityType.BusinessEntityEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new BusinessEntityEntity(fields); }
	}

	/// <summary>Factory to create new, empty BusinessEntityAddressEntity objects.</summary>
	[Serializable]
	public partial class BusinessEntityAddressEntityFactory : EntityFactoryBase2<BusinessEntityAddressEntity> 
	{
		/// <summary>CTor</summary>
		public BusinessEntityAddressEntityFactory() : base("BusinessEntityAddressEntity", AdventureWorks.Dal.Adapter.EntityType.BusinessEntityAddressEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new BusinessEntityAddressEntity(fields); }
	}

	/// <summary>Factory to create new, empty BusinessEntityContactEntity objects.</summary>
	[Serializable]
	public partial class BusinessEntityContactEntityFactory : EntityFactoryBase2<BusinessEntityContactEntity> 
	{
		/// <summary>CTor</summary>
		public BusinessEntityContactEntityFactory() : base("BusinessEntityContactEntity", AdventureWorks.Dal.Adapter.EntityType.BusinessEntityContactEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new BusinessEntityContactEntity(fields); }
	}

	/// <summary>Factory to create new, empty ContactCreditCardEntity objects.</summary>
	[Serializable]
	public partial class ContactCreditCardEntityFactory : EntityFactoryBase2<ContactCreditCardEntity> 
	{
		/// <summary>CTor</summary>
		public ContactCreditCardEntityFactory() : base("ContactCreditCardEntity", AdventureWorks.Dal.Adapter.EntityType.ContactCreditCardEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ContactCreditCardEntity(fields); }
	}

	/// <summary>Factory to create new, empty ContactTypeEntity objects.</summary>
	[Serializable]
	public partial class ContactTypeEntityFactory : EntityFactoryBase2<ContactTypeEntity> 
	{
		/// <summary>CTor</summary>
		public ContactTypeEntityFactory() : base("ContactTypeEntity", AdventureWorks.Dal.Adapter.EntityType.ContactTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ContactTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty CountryRegionEntity objects.</summary>
	[Serializable]
	public partial class CountryRegionEntityFactory : EntityFactoryBase2<CountryRegionEntity> 
	{
		/// <summary>CTor</summary>
		public CountryRegionEntityFactory() : base("CountryRegionEntity", AdventureWorks.Dal.Adapter.EntityType.CountryRegionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CountryRegionEntity(fields); }
	}

	/// <summary>Factory to create new, empty CountryRegionCurrencyEntity objects.</summary>
	[Serializable]
	public partial class CountryRegionCurrencyEntityFactory : EntityFactoryBase2<CountryRegionCurrencyEntity> 
	{
		/// <summary>CTor</summary>
		public CountryRegionCurrencyEntityFactory() : base("CountryRegionCurrencyEntity", AdventureWorks.Dal.Adapter.EntityType.CountryRegionCurrencyEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CountryRegionCurrencyEntity(fields); }
	}

	/// <summary>Factory to create new, empty CreditCardEntity objects.</summary>
	[Serializable]
	public partial class CreditCardEntityFactory : EntityFactoryBase2<CreditCardEntity> 
	{
		/// <summary>CTor</summary>
		public CreditCardEntityFactory() : base("CreditCardEntity", AdventureWorks.Dal.Adapter.EntityType.CreditCardEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CreditCardEntity(fields); }
	}

	/// <summary>Factory to create new, empty CultureEntity objects.</summary>
	[Serializable]
	public partial class CultureEntityFactory : EntityFactoryBase2<CultureEntity> 
	{
		/// <summary>CTor</summary>
		public CultureEntityFactory() : base("CultureEntity", AdventureWorks.Dal.Adapter.EntityType.CultureEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CultureEntity(fields); }
	}

	/// <summary>Factory to create new, empty CurrencyEntity objects.</summary>
	[Serializable]
	public partial class CurrencyEntityFactory : EntityFactoryBase2<CurrencyEntity> 
	{
		/// <summary>CTor</summary>
		public CurrencyEntityFactory() : base("CurrencyEntity", AdventureWorks.Dal.Adapter.EntityType.CurrencyEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CurrencyEntity(fields); }
	}

	/// <summary>Factory to create new, empty CurrencyRateEntity objects.</summary>
	[Serializable]
	public partial class CurrencyRateEntityFactory : EntityFactoryBase2<CurrencyRateEntity> 
	{
		/// <summary>CTor</summary>
		public CurrencyRateEntityFactory() : base("CurrencyRateEntity", AdventureWorks.Dal.Adapter.EntityType.CurrencyRateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CurrencyRateEntity(fields); }
	}

	/// <summary>Factory to create new, empty CustomerEntity objects.</summary>
	[Serializable]
	public partial class CustomerEntityFactory : EntityFactoryBase2<CustomerEntity> 
	{
		/// <summary>CTor</summary>
		public CustomerEntityFactory() : base("CustomerEntity", AdventureWorks.Dal.Adapter.EntityType.CustomerEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CustomerEntity(fields); }
	}

	/// <summary>Factory to create new, empty DepartmentEntity objects.</summary>
	[Serializable]
	public partial class DepartmentEntityFactory : EntityFactoryBase2<DepartmentEntity> 
	{
		/// <summary>CTor</summary>
		public DepartmentEntityFactory() : base("DepartmentEntity", AdventureWorks.Dal.Adapter.EntityType.DepartmentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new DepartmentEntity(fields); }
	}

	/// <summary>Factory to create new, empty DocumentEntity objects.</summary>
	[Serializable]
	public partial class DocumentEntityFactory : EntityFactoryBase2<DocumentEntity> 
	{
		/// <summary>CTor</summary>
		public DocumentEntityFactory() : base("DocumentEntity", AdventureWorks.Dal.Adapter.EntityType.DocumentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new DocumentEntity(fields); }
	}

	/// <summary>Factory to create new, empty EmailAddressEntity objects.</summary>
	[Serializable]
	public partial class EmailAddressEntityFactory : EntityFactoryBase2<EmailAddressEntity> 
	{
		/// <summary>CTor</summary>
		public EmailAddressEntityFactory() : base("EmailAddressEntity", AdventureWorks.Dal.Adapter.EntityType.EmailAddressEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new EmailAddressEntity(fields); }
	}

	/// <summary>Factory to create new, empty EmployeeEntity objects.</summary>
	[Serializable]
	public partial class EmployeeEntityFactory : EntityFactoryBase2<EmployeeEntity> 
	{
		/// <summary>CTor</summary>
		public EmployeeEntityFactory() : base("EmployeeEntity", AdventureWorks.Dal.Adapter.EntityType.EmployeeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new EmployeeEntity(fields); }
	}

	/// <summary>Factory to create new, empty EmployeeDepartmentHistoryEntity objects.</summary>
	[Serializable]
	public partial class EmployeeDepartmentHistoryEntityFactory : EntityFactoryBase2<EmployeeDepartmentHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public EmployeeDepartmentHistoryEntityFactory() : base("EmployeeDepartmentHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.EmployeeDepartmentHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new EmployeeDepartmentHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty EmployeePayHistoryEntity objects.</summary>
	[Serializable]
	public partial class EmployeePayHistoryEntityFactory : EntityFactoryBase2<EmployeePayHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public EmployeePayHistoryEntityFactory() : base("EmployeePayHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.EmployeePayHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new EmployeePayHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty IllustrationEntity objects.</summary>
	[Serializable]
	public partial class IllustrationEntityFactory : EntityFactoryBase2<IllustrationEntity> 
	{
		/// <summary>CTor</summary>
		public IllustrationEntityFactory() : base("IllustrationEntity", AdventureWorks.Dal.Adapter.EntityType.IllustrationEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new IllustrationEntity(fields); }
	}

	/// <summary>Factory to create new, empty JobCandidateEntity objects.</summary>
	[Serializable]
	public partial class JobCandidateEntityFactory : EntityFactoryBase2<JobCandidateEntity> 
	{
		/// <summary>CTor</summary>
		public JobCandidateEntityFactory() : base("JobCandidateEntity", AdventureWorks.Dal.Adapter.EntityType.JobCandidateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new JobCandidateEntity(fields); }
	}

	/// <summary>Factory to create new, empty LocationEntity objects.</summary>
	[Serializable]
	public partial class LocationEntityFactory : EntityFactoryBase2<LocationEntity> 
	{
		/// <summary>CTor</summary>
		public LocationEntityFactory() : base("LocationEntity", AdventureWorks.Dal.Adapter.EntityType.LocationEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new LocationEntity(fields); }
	}

	/// <summary>Factory to create new, empty PasswordEntity objects.</summary>
	[Serializable]
	public partial class PasswordEntityFactory : EntityFactoryBase2<PasswordEntity> 
	{
		/// <summary>CTor</summary>
		public PasswordEntityFactory() : base("PasswordEntity", AdventureWorks.Dal.Adapter.EntityType.PasswordEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PasswordEntity(fields); }
	}

	/// <summary>Factory to create new, empty PersonEntity objects.</summary>
	[Serializable]
	public partial class PersonEntityFactory : EntityFactoryBase2<PersonEntity> 
	{
		/// <summary>CTor</summary>
		public PersonEntityFactory() : base("PersonEntity", AdventureWorks.Dal.Adapter.EntityType.PersonEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PersonEntity(fields); }
	}

	/// <summary>Factory to create new, empty PersonPhoneEntity objects.</summary>
	[Serializable]
	public partial class PersonPhoneEntityFactory : EntityFactoryBase2<PersonPhoneEntity> 
	{
		/// <summary>CTor</summary>
		public PersonPhoneEntityFactory() : base("PersonPhoneEntity", AdventureWorks.Dal.Adapter.EntityType.PersonPhoneEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PersonPhoneEntity(fields); }
	}

	/// <summary>Factory to create new, empty PhoneNumberTypeEntity objects.</summary>
	[Serializable]
	public partial class PhoneNumberTypeEntityFactory : EntityFactoryBase2<PhoneNumberTypeEntity> 
	{
		/// <summary>CTor</summary>
		public PhoneNumberTypeEntityFactory() : base("PhoneNumberTypeEntity", AdventureWorks.Dal.Adapter.EntityType.PhoneNumberTypeEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PhoneNumberTypeEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductEntity objects.</summary>
	[Serializable]
	public partial class ProductEntityFactory : EntityFactoryBase2<ProductEntity> 
	{
		/// <summary>CTor</summary>
		public ProductEntityFactory() : base("ProductEntity", AdventureWorks.Dal.Adapter.EntityType.ProductEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductCategoryEntity objects.</summary>
	[Serializable]
	public partial class ProductCategoryEntityFactory : EntityFactoryBase2<ProductCategoryEntity> 
	{
		/// <summary>CTor</summary>
		public ProductCategoryEntityFactory() : base("ProductCategoryEntity", AdventureWorks.Dal.Adapter.EntityType.ProductCategoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductCategoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductCostHistoryEntity objects.</summary>
	[Serializable]
	public partial class ProductCostHistoryEntityFactory : EntityFactoryBase2<ProductCostHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public ProductCostHistoryEntityFactory() : base("ProductCostHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.ProductCostHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductCostHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductDescriptionEntity objects.</summary>
	[Serializable]
	public partial class ProductDescriptionEntityFactory : EntityFactoryBase2<ProductDescriptionEntity> 
	{
		/// <summary>CTor</summary>
		public ProductDescriptionEntityFactory() : base("ProductDescriptionEntity", AdventureWorks.Dal.Adapter.EntityType.ProductDescriptionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductDescriptionEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductDocumentEntity objects.</summary>
	[Serializable]
	public partial class ProductDocumentEntityFactory : EntityFactoryBase2<ProductDocumentEntity> 
	{
		/// <summary>CTor</summary>
		public ProductDocumentEntityFactory() : base("ProductDocumentEntity", AdventureWorks.Dal.Adapter.EntityType.ProductDocumentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductDocumentEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductInventoryEntity objects.</summary>
	[Serializable]
	public partial class ProductInventoryEntityFactory : EntityFactoryBase2<ProductInventoryEntity> 
	{
		/// <summary>CTor</summary>
		public ProductInventoryEntityFactory() : base("ProductInventoryEntity", AdventureWorks.Dal.Adapter.EntityType.ProductInventoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductInventoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductListPriceHistoryEntity objects.</summary>
	[Serializable]
	public partial class ProductListPriceHistoryEntityFactory : EntityFactoryBase2<ProductListPriceHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public ProductListPriceHistoryEntityFactory() : base("ProductListPriceHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.ProductListPriceHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductListPriceHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductModelEntity objects.</summary>
	[Serializable]
	public partial class ProductModelEntityFactory : EntityFactoryBase2<ProductModelEntity> 
	{
		/// <summary>CTor</summary>
		public ProductModelEntityFactory() : base("ProductModelEntity", AdventureWorks.Dal.Adapter.EntityType.ProductModelEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductModelEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductModelIllustrationEntity objects.</summary>
	[Serializable]
	public partial class ProductModelIllustrationEntityFactory : EntityFactoryBase2<ProductModelIllustrationEntity> 
	{
		/// <summary>CTor</summary>
		public ProductModelIllustrationEntityFactory() : base("ProductModelIllustrationEntity", AdventureWorks.Dal.Adapter.EntityType.ProductModelIllustrationEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductModelIllustrationEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductModelProductDescriptionCultureEntity objects.</summary>
	[Serializable]
	public partial class ProductModelProductDescriptionCultureEntityFactory : EntityFactoryBase2<ProductModelProductDescriptionCultureEntity> 
	{
		/// <summary>CTor</summary>
		public ProductModelProductDescriptionCultureEntityFactory() : base("ProductModelProductDescriptionCultureEntity", AdventureWorks.Dal.Adapter.EntityType.ProductModelProductDescriptionCultureEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductModelProductDescriptionCultureEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductPhotoEntity objects.</summary>
	[Serializable]
	public partial class ProductPhotoEntityFactory : EntityFactoryBase2<ProductPhotoEntity> 
	{
		/// <summary>CTor</summary>
		public ProductPhotoEntityFactory() : base("ProductPhotoEntity", AdventureWorks.Dal.Adapter.EntityType.ProductPhotoEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductPhotoEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductProductPhotoEntity objects.</summary>
	[Serializable]
	public partial class ProductProductPhotoEntityFactory : EntityFactoryBase2<ProductProductPhotoEntity> 
	{
		/// <summary>CTor</summary>
		public ProductProductPhotoEntityFactory() : base("ProductProductPhotoEntity", AdventureWorks.Dal.Adapter.EntityType.ProductProductPhotoEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductProductPhotoEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductReviewEntity objects.</summary>
	[Serializable]
	public partial class ProductReviewEntityFactory : EntityFactoryBase2<ProductReviewEntity> 
	{
		/// <summary>CTor</summary>
		public ProductReviewEntityFactory() : base("ProductReviewEntity", AdventureWorks.Dal.Adapter.EntityType.ProductReviewEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductReviewEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductSubcategoryEntity objects.</summary>
	[Serializable]
	public partial class ProductSubcategoryEntityFactory : EntityFactoryBase2<ProductSubcategoryEntity> 
	{
		/// <summary>CTor</summary>
		public ProductSubcategoryEntityFactory() : base("ProductSubcategoryEntity", AdventureWorks.Dal.Adapter.EntityType.ProductSubcategoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductSubcategoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProductVendorEntity objects.</summary>
	[Serializable]
	public partial class ProductVendorEntityFactory : EntityFactoryBase2<ProductVendorEntity> 
	{
		/// <summary>CTor</summary>
		public ProductVendorEntityFactory() : base("ProductVendorEntity", AdventureWorks.Dal.Adapter.EntityType.ProductVendorEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProductVendorEntity(fields); }
	}

	/// <summary>Factory to create new, empty PurchaseOrderDetailEntity objects.</summary>
	[Serializable]
	public partial class PurchaseOrderDetailEntityFactory : EntityFactoryBase2<PurchaseOrderDetailEntity> 
	{
		/// <summary>CTor</summary>
		public PurchaseOrderDetailEntityFactory() : base("PurchaseOrderDetailEntity", AdventureWorks.Dal.Adapter.EntityType.PurchaseOrderDetailEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PurchaseOrderDetailEntity(fields); }
	}

	/// <summary>Factory to create new, empty PurchaseOrderHeaderEntity objects.</summary>
	[Serializable]
	public partial class PurchaseOrderHeaderEntityFactory : EntityFactoryBase2<PurchaseOrderHeaderEntity> 
	{
		/// <summary>CTor</summary>
		public PurchaseOrderHeaderEntityFactory() : base("PurchaseOrderHeaderEntity", AdventureWorks.Dal.Adapter.EntityType.PurchaseOrderHeaderEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new PurchaseOrderHeaderEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesOrderDetailEntity objects.</summary>
	[Serializable]
	public partial class SalesOrderDetailEntityFactory : EntityFactoryBase2<SalesOrderDetailEntity> 
	{
		/// <summary>CTor</summary>
		public SalesOrderDetailEntityFactory() : base("SalesOrderDetailEntity", AdventureWorks.Dal.Adapter.EntityType.SalesOrderDetailEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesOrderDetailEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesOrderHeaderEntity objects.</summary>
	[Serializable]
	public partial class SalesOrderHeaderEntityFactory : EntityFactoryBase2<SalesOrderHeaderEntity> 
	{
		/// <summary>CTor</summary>
		public SalesOrderHeaderEntityFactory() : base("SalesOrderHeaderEntity", AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesOrderHeaderEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesOrderHeaderSalesReasonEntity objects.</summary>
	[Serializable]
	public partial class SalesOrderHeaderSalesReasonEntityFactory : EntityFactoryBase2<SalesOrderHeaderSalesReasonEntity> 
	{
		/// <summary>CTor</summary>
		public SalesOrderHeaderSalesReasonEntityFactory() : base("SalesOrderHeaderSalesReasonEntity", AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderSalesReasonEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesOrderHeaderSalesReasonEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesPersonEntity objects.</summary>
	[Serializable]
	public partial class SalesPersonEntityFactory : EntityFactoryBase2<SalesPersonEntity> 
	{
		/// <summary>CTor</summary>
		public SalesPersonEntityFactory() : base("SalesPersonEntity", AdventureWorks.Dal.Adapter.EntityType.SalesPersonEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesPersonEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesPersonQuotaHistoryEntity objects.</summary>
	[Serializable]
	public partial class SalesPersonQuotaHistoryEntityFactory : EntityFactoryBase2<SalesPersonQuotaHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public SalesPersonQuotaHistoryEntityFactory() : base("SalesPersonQuotaHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.SalesPersonQuotaHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesPersonQuotaHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesReasonEntity objects.</summary>
	[Serializable]
	public partial class SalesReasonEntityFactory : EntityFactoryBase2<SalesReasonEntity> 
	{
		/// <summary>CTor</summary>
		public SalesReasonEntityFactory() : base("SalesReasonEntity", AdventureWorks.Dal.Adapter.EntityType.SalesReasonEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesReasonEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesTaxRateEntity objects.</summary>
	[Serializable]
	public partial class SalesTaxRateEntityFactory : EntityFactoryBase2<SalesTaxRateEntity> 
	{
		/// <summary>CTor</summary>
		public SalesTaxRateEntityFactory() : base("SalesTaxRateEntity", AdventureWorks.Dal.Adapter.EntityType.SalesTaxRateEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesTaxRateEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesTerritoryEntity objects.</summary>
	[Serializable]
	public partial class SalesTerritoryEntityFactory : EntityFactoryBase2<SalesTerritoryEntity> 
	{
		/// <summary>CTor</summary>
		public SalesTerritoryEntityFactory() : base("SalesTerritoryEntity", AdventureWorks.Dal.Adapter.EntityType.SalesTerritoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesTerritoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty SalesTerritoryHistoryEntity objects.</summary>
	[Serializable]
	public partial class SalesTerritoryHistoryEntityFactory : EntityFactoryBase2<SalesTerritoryHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public SalesTerritoryHistoryEntityFactory() : base("SalesTerritoryHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.SalesTerritoryHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SalesTerritoryHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty ScrapReasonEntity objects.</summary>
	[Serializable]
	public partial class ScrapReasonEntityFactory : EntityFactoryBase2<ScrapReasonEntity> 
	{
		/// <summary>CTor</summary>
		public ScrapReasonEntityFactory() : base("ScrapReasonEntity", AdventureWorks.Dal.Adapter.EntityType.ScrapReasonEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ScrapReasonEntity(fields); }
	}

	/// <summary>Factory to create new, empty ShiftEntity objects.</summary>
	[Serializable]
	public partial class ShiftEntityFactory : EntityFactoryBase2<ShiftEntity> 
	{
		/// <summary>CTor</summary>
		public ShiftEntityFactory() : base("ShiftEntity", AdventureWorks.Dal.Adapter.EntityType.ShiftEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ShiftEntity(fields); }
	}

	/// <summary>Factory to create new, empty ShipMethodEntity objects.</summary>
	[Serializable]
	public partial class ShipMethodEntityFactory : EntityFactoryBase2<ShipMethodEntity> 
	{
		/// <summary>CTor</summary>
		public ShipMethodEntityFactory() : base("ShipMethodEntity", AdventureWorks.Dal.Adapter.EntityType.ShipMethodEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ShipMethodEntity(fields); }
	}

	/// <summary>Factory to create new, empty ShoppingCartItemEntity objects.</summary>
	[Serializable]
	public partial class ShoppingCartItemEntityFactory : EntityFactoryBase2<ShoppingCartItemEntity> 
	{
		/// <summary>CTor</summary>
		public ShoppingCartItemEntityFactory() : base("ShoppingCartItemEntity", AdventureWorks.Dal.Adapter.EntityType.ShoppingCartItemEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ShoppingCartItemEntity(fields); }
	}

	/// <summary>Factory to create new, empty SpecialOfferEntity objects.</summary>
	[Serializable]
	public partial class SpecialOfferEntityFactory : EntityFactoryBase2<SpecialOfferEntity> 
	{
		/// <summary>CTor</summary>
		public SpecialOfferEntityFactory() : base("SpecialOfferEntity", AdventureWorks.Dal.Adapter.EntityType.SpecialOfferEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SpecialOfferEntity(fields); }
	}

	/// <summary>Factory to create new, empty SpecialOfferProductEntity objects.</summary>
	[Serializable]
	public partial class SpecialOfferProductEntityFactory : EntityFactoryBase2<SpecialOfferProductEntity> 
	{
		/// <summary>CTor</summary>
		public SpecialOfferProductEntityFactory() : base("SpecialOfferProductEntity", AdventureWorks.Dal.Adapter.EntityType.SpecialOfferProductEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SpecialOfferProductEntity(fields); }
	}

	/// <summary>Factory to create new, empty StateProvinceEntity objects.</summary>
	[Serializable]
	public partial class StateProvinceEntityFactory : EntityFactoryBase2<StateProvinceEntity> 
	{
		/// <summary>CTor</summary>
		public StateProvinceEntityFactory() : base("StateProvinceEntity", AdventureWorks.Dal.Adapter.EntityType.StateProvinceEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new StateProvinceEntity(fields); }
	}

	/// <summary>Factory to create new, empty StoreEntity objects.</summary>
	[Serializable]
	public partial class StoreEntityFactory : EntityFactoryBase2<StoreEntity> 
	{
		/// <summary>CTor</summary>
		public StoreEntityFactory() : base("StoreEntity", AdventureWorks.Dal.Adapter.EntityType.StoreEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new StoreEntity(fields); }
	}

	/// <summary>Factory to create new, empty TransactionHistoryEntity objects.</summary>
	[Serializable]
	public partial class TransactionHistoryEntityFactory : EntityFactoryBase2<TransactionHistoryEntity> 
	{
		/// <summary>CTor</summary>
		public TransactionHistoryEntityFactory() : base("TransactionHistoryEntity", AdventureWorks.Dal.Adapter.EntityType.TransactionHistoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TransactionHistoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty TransactionHistoryArchiveEntity objects.</summary>
	[Serializable]
	public partial class TransactionHistoryArchiveEntityFactory : EntityFactoryBase2<TransactionHistoryArchiveEntity> 
	{
		/// <summary>CTor</summary>
		public TransactionHistoryArchiveEntityFactory() : base("TransactionHistoryArchiveEntity", AdventureWorks.Dal.Adapter.EntityType.TransactionHistoryArchiveEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new TransactionHistoryArchiveEntity(fields); }
	}

	/// <summary>Factory to create new, empty UnitMeasureEntity objects.</summary>
	[Serializable]
	public partial class UnitMeasureEntityFactory : EntityFactoryBase2<UnitMeasureEntity> 
	{
		/// <summary>CTor</summary>
		public UnitMeasureEntityFactory() : base("UnitMeasureEntity", AdventureWorks.Dal.Adapter.EntityType.UnitMeasureEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UnitMeasureEntity(fields); }
	}

	/// <summary>Factory to create new, empty VendorEntity objects.</summary>
	[Serializable]
	public partial class VendorEntityFactory : EntityFactoryBase2<VendorEntity> 
	{
		/// <summary>CTor</summary>
		public VendorEntityFactory() : base("VendorEntity", AdventureWorks.Dal.Adapter.EntityType.VendorEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new VendorEntity(fields); }
	}

	/// <summary>Factory to create new, empty WorkOrderEntity objects.</summary>
	[Serializable]
	public partial class WorkOrderEntityFactory : EntityFactoryBase2<WorkOrderEntity> 
	{
		/// <summary>CTor</summary>
		public WorkOrderEntityFactory() : base("WorkOrderEntity", AdventureWorks.Dal.Adapter.EntityType.WorkOrderEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new WorkOrderEntity(fields); }
	}

	/// <summary>Factory to create new, empty WorkOrderRoutingEntity objects.</summary>
	[Serializable]
	public partial class WorkOrderRoutingEntityFactory : EntityFactoryBase2<WorkOrderRoutingEntity> 
	{
		/// <summary>CTor</summary>
		public WorkOrderRoutingEntityFactory() : base("WorkOrderRoutingEntity", AdventureWorks.Dal.Adapter.EntityType.WorkOrderRoutingEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new WorkOrderRoutingEntity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(AdventureWorks.Dal.Adapter.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(AdventureWorks.Dal.Adapter.EntityType)))
			{
				var factory = GetFactory((AdventureWorks.Dal.Adapter.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the AdventureWorks.Dal.Adapter.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(AdventureWorks.Dal.Adapter.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case AdventureWorks.Dal.Adapter.EntityType.AddressEntity:
					return new AddressEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.AddressTypeEntity:
					return new AddressTypeEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.BillOfMaterialEntity:
					return new BillOfMaterialEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.BusinessEntityEntity:
					return new BusinessEntityEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.BusinessEntityAddressEntity:
					return new BusinessEntityAddressEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.BusinessEntityContactEntity:
					return new BusinessEntityContactEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ContactCreditCardEntity:
					return new ContactCreditCardEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ContactTypeEntity:
					return new ContactTypeEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CountryRegionEntity:
					return new CountryRegionEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CountryRegionCurrencyEntity:
					return new CountryRegionCurrencyEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CreditCardEntity:
					return new CreditCardEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CultureEntity:
					return new CultureEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CurrencyEntity:
					return new CurrencyEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CurrencyRateEntity:
					return new CurrencyRateEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.CustomerEntity:
					return new CustomerEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.DepartmentEntity:
					return new DepartmentEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.DocumentEntity:
					return new DocumentEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.EmailAddressEntity:
					return new EmailAddressEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.EmployeeEntity:
					return new EmployeeEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.EmployeeDepartmentHistoryEntity:
					return new EmployeeDepartmentHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.EmployeePayHistoryEntity:
					return new EmployeePayHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.IllustrationEntity:
					return new IllustrationEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.JobCandidateEntity:
					return new JobCandidateEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.LocationEntity:
					return new LocationEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PasswordEntity:
					return new PasswordEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PersonEntity:
					return new PersonEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PersonPhoneEntity:
					return new PersonPhoneEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PhoneNumberTypeEntity:
					return new PhoneNumberTypeEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductEntity:
					return new ProductEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductCategoryEntity:
					return new ProductCategoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductCostHistoryEntity:
					return new ProductCostHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductDescriptionEntity:
					return new ProductDescriptionEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductDocumentEntity:
					return new ProductDocumentEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductInventoryEntity:
					return new ProductInventoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductListPriceHistoryEntity:
					return new ProductListPriceHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductModelEntity:
					return new ProductModelEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductModelIllustrationEntity:
					return new ProductModelIllustrationEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductModelProductDescriptionCultureEntity:
					return new ProductModelProductDescriptionCultureEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductPhotoEntity:
					return new ProductPhotoEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductProductPhotoEntity:
					return new ProductProductPhotoEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductReviewEntity:
					return new ProductReviewEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductSubcategoryEntity:
					return new ProductSubcategoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ProductVendorEntity:
					return new ProductVendorEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PurchaseOrderDetailEntity:
					return new PurchaseOrderDetailEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.PurchaseOrderHeaderEntity:
					return new PurchaseOrderHeaderEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesOrderDetailEntity:
					return new SalesOrderDetailEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderEntity:
					return new SalesOrderHeaderEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesOrderHeaderSalesReasonEntity:
					return new SalesOrderHeaderSalesReasonEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesPersonEntity:
					return new SalesPersonEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesPersonQuotaHistoryEntity:
					return new SalesPersonQuotaHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesReasonEntity:
					return new SalesReasonEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesTaxRateEntity:
					return new SalesTaxRateEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesTerritoryEntity:
					return new SalesTerritoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SalesTerritoryHistoryEntity:
					return new SalesTerritoryHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ScrapReasonEntity:
					return new ScrapReasonEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ShiftEntity:
					return new ShiftEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ShipMethodEntity:
					return new ShipMethodEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.ShoppingCartItemEntity:
					return new ShoppingCartItemEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SpecialOfferEntity:
					return new SpecialOfferEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.SpecialOfferProductEntity:
					return new SpecialOfferProductEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.StateProvinceEntity:
					return new StateProvinceEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.StoreEntity:
					return new StoreEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.TransactionHistoryEntity:
					return new TransactionHistoryEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.TransactionHistoryArchiveEntity:
					return new TransactionHistoryArchiveEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.UnitMeasureEntity:
					return new UnitMeasureEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.VendorEntity:
					return new VendorEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.WorkOrderEntity:
					return new WorkOrderEntityFactory();
				case AdventureWorks.Dal.Adapter.EntityType.WorkOrderRoutingEntity:
					return new WorkOrderRoutingEntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the AdventureWorks.Dal.Adapter.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IEntityFieldsCore GetTypedViewFields(int typedViewTypeEnumValue) { return ModelInfoProviderSingleton.GetInstance().GetTypedViewFields(((TypedViewType)typedViewTypeEnumValue).ToString()); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (AdventureWorks.Dal.Adapter.EntityType)Enum.Parse(typeof(AdventureWorks.Dal.Adapter.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((AdventureWorks.Dal.Adapter.EntityType)Enum.Parse(typeof(AdventureWorks.Dal.Adapter.EntityType), leftOperandEntityName, false), joinType, (AdventureWorks.Dal.Adapter.EntityType)Enum.Parse(typeof(AdventureWorks.Dal.Adapter.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (AdventureWorks.Dal.Adapter.EntityType)Enum.Parse(typeof(AdventureWorks.Dal.Adapter.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((AdventureWorks.Dal.Adapter.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}

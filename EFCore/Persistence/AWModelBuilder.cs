//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v5.6.</auto-generated>
//------------------------------------------------------------------------------
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using EFCore.Bencher.EntityClasses;

namespace EFCore.Bencher
{
	/// <summary>Model builder class for code first development.</summary>
	public partial class AWModelBuilder
	{
		/// <summary>Builds the model defined in this class with the modelbuilder specified. Called from the generated DbContext</summary>
		/// <param name="modelBuilder">The model builder to build the model with.</param>
		public virtual void BuildModel(ModelBuilder modelBuilder)
		{
			modelBuilder.HasDefaultSchema("dbo");
			MapAddress(modelBuilder.Entity<Address>());
			MapAddressType(modelBuilder.Entity<AddressType>());
			MapBillOfMaterial(modelBuilder.Entity<BillOfMaterial>());
			MapBusinessEntity(modelBuilder.Entity<BusinessEntity>());
			MapBusinessEntityAddress(modelBuilder.Entity<BusinessEntityAddress>());
			MapBusinessEntityContact(modelBuilder.Entity<BusinessEntityContact>());
			MapContactCreditCard(modelBuilder.Entity<ContactCreditCard>());
			MapContactType(modelBuilder.Entity<ContactType>());
			MapCountryRegion(modelBuilder.Entity<CountryRegion>());
			MapCountryRegionCurrency(modelBuilder.Entity<CountryRegionCurrency>());
			MapCreditCard(modelBuilder.Entity<CreditCard>());
			MapCulture(modelBuilder.Entity<Culture>());
			MapCurrency(modelBuilder.Entity<Currency>());
			MapCurrencyRate(modelBuilder.Entity<CurrencyRate>());
			MapCustomer(modelBuilder.Entity<Customer>());
			MapDepartment(modelBuilder.Entity<Department>());
			MapDocument(modelBuilder.Entity<Document>());
			MapEmailAddress(modelBuilder.Entity<EmailAddress>());
			MapEmployee(modelBuilder.Entity<Employee>());
			MapEmployeeDepartmentHistory(modelBuilder.Entity<EmployeeDepartmentHistory>());
			MapEmployeePayHistory(modelBuilder.Entity<EmployeePayHistory>());
			MapIllustration(modelBuilder.Entity<Illustration>());
			MapJobCandidate(modelBuilder.Entity<JobCandidate>());
			MapLocation(modelBuilder.Entity<Location>());
			MapPassword(modelBuilder.Entity<Password>());
			MapPerson(modelBuilder.Entity<Person>());
			MapPersonPhone(modelBuilder.Entity<PersonPhone>());
			MapPhoneNumberType(modelBuilder.Entity<PhoneNumberType>());
			MapProduct(modelBuilder.Entity<Product>());
			MapProductCategory(modelBuilder.Entity<ProductCategory>());
			MapProductCostHistory(modelBuilder.Entity<ProductCostHistory>());
			MapProductDescription(modelBuilder.Entity<ProductDescription>());
			MapProductDocument(modelBuilder.Entity<ProductDocument>());
			MapProductInventory(modelBuilder.Entity<ProductInventory>());
			MapProductListPriceHistory(modelBuilder.Entity<ProductListPriceHistory>());
			MapProductModel(modelBuilder.Entity<ProductModel>());
			MapProductModelIllustration(modelBuilder.Entity<ProductModelIllustration>());
			MapProductModelProductDescriptionCulture(modelBuilder.Entity<ProductModelProductDescriptionCulture>());
			MapProductPhoto(modelBuilder.Entity<ProductPhoto>());
			MapProductProductPhoto(modelBuilder.Entity<ProductProductPhoto>());
			MapProductReview(modelBuilder.Entity<ProductReview>());
			MapProductSubcategory(modelBuilder.Entity<ProductSubcategory>());
			MapProductVendor(modelBuilder.Entity<ProductVendor>());
			MapPurchaseOrderDetail(modelBuilder.Entity<PurchaseOrderDetail>());
			MapPurchaseOrderHeader(modelBuilder.Entity<PurchaseOrderHeader>());
			MapSalesOrderDetail(modelBuilder.Entity<SalesOrderDetail>());
			MapSalesOrderHeader(modelBuilder.Entity<SalesOrderHeader>());
			MapSalesOrderHeaderSalesReason(modelBuilder.Entity<SalesOrderHeaderSalesReason>());
			MapSalesPerson(modelBuilder.Entity<SalesPerson>());
			MapSalesPersonQuotaHistory(modelBuilder.Entity<SalesPersonQuotaHistory>());
			MapSalesReason(modelBuilder.Entity<SalesReason>());
			MapSalesTaxRate(modelBuilder.Entity<SalesTaxRate>());
			MapSalesTerritory(modelBuilder.Entity<SalesTerritory>());
			MapSalesTerritoryHistory(modelBuilder.Entity<SalesTerritoryHistory>());
			MapScrapReason(modelBuilder.Entity<ScrapReason>());
			MapShift(modelBuilder.Entity<Shift>());
			MapShipMethod(modelBuilder.Entity<ShipMethod>());
			MapShoppingCartItem(modelBuilder.Entity<ShoppingCartItem>());
			MapSpecialOffer(modelBuilder.Entity<SpecialOffer>());
			MapSpecialOfferProduct(modelBuilder.Entity<SpecialOfferProduct>());
			MapStateProvince(modelBuilder.Entity<StateProvince>());
			MapStore(modelBuilder.Entity<Store>());
			MapTransactionHistory(modelBuilder.Entity<TransactionHistory>());
			MapTransactionHistoryArchive(modelBuilder.Entity<TransactionHistoryArchive>());
			MapUnitMeasure(modelBuilder.Entity<UnitMeasure>());
			MapVendor(modelBuilder.Entity<Vendor>());
			MapWorkOrder(modelBuilder.Entity<WorkOrder>());
			MapWorkOrderRouting(modelBuilder.Entity<WorkOrderRouting>());
		}

		/// <summary>Defines the mapping information for the entity 'Address'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapAddress(EntityTypeBuilder<Address> config)
		{
			config.ToTable("Address", "Person");
			config.HasKey(t => t.AddressId);
			config.Property(t => t.AddressId).HasColumnName("AddressID").ValueGeneratedOnAdd();
			config.Property(t => t.AddressLine1).HasMaxLength(60).IsRequired();
			config.Property(t => t.AddressLine2).HasMaxLength(60);
			config.Property(t => t.City).HasMaxLength(30).IsRequired();
			config.Property(t => t.StateProvinceId).HasColumnName("StateProvinceID");
			config.Property(t => t.PostalCode).HasMaxLength(15).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.StateProvince).WithMany(t => t.Addresses).HasForeignKey(t => t.StateProvinceId);
		}

		/// <summary>Defines the mapping information for the entity 'AddressType'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapAddressType(EntityTypeBuilder<AddressType> config)
		{
			config.ToTable("AddressType", "Person");
			config.HasKey(t => t.AddressTypeId);
			config.Property(t => t.AddressTypeId).HasColumnName("AddressTypeID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'BillOfMaterial'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapBillOfMaterial(EntityTypeBuilder<BillOfMaterial> config)
		{
			config.ToTable("BillOfMaterials", "Production");
			config.HasKey(t => t.BillOfMaterialsId);
			config.Property(t => t.BillOfMaterialsId).HasColumnName("BillOfMaterialsID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductAssemblyId).HasColumnName("ProductAssemblyID");
			config.Property(t => t.ComponentId).HasColumnName("ComponentID");
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.UnitMeasureCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.Bomlevel).HasColumnName("BOMLevel");
			config.Property(t => t.PerAssemblyQty).HasColumnType("decimal(8,2)");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.BillOfMaterials).HasForeignKey(t => t.ComponentId);
			config.HasOne(t => t.Product_).WithMany(t => t.BillOfMaterials_).HasForeignKey(t => t.ProductAssemblyId);
			config.HasOne(t => t.UnitMeasure).WithMany(t => t.BillOfMaterials).HasForeignKey(t => t.UnitMeasureCode);
		}

		/// <summary>Defines the mapping information for the entity 'BusinessEntity'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapBusinessEntity(EntityTypeBuilder<BusinessEntity> config)
		{
			config.ToTable("BusinessEntity", "Person");
			config.HasKey(t => t.BusinessEntityId);
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID").ValueGeneratedOnAdd();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'BusinessEntityAddress'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapBusinessEntityAddress(EntityTypeBuilder<BusinessEntityAddress> config)
		{
			config.ToTable("BusinessEntityAddress", "Person");
			config.HasKey(t => new { t.AddressId, t.AddressTypeId, t.BusinessEntityId });
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.AddressId).HasColumnName("AddressID");
			config.Property(t => t.AddressTypeId).HasColumnName("AddressTypeID");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Address).WithMany(t => t.BusinessEntityAddresses).HasForeignKey(t => t.AddressId);
			config.HasOne(t => t.AddressType).WithMany(t => t.BusinessEntityAddresses).HasForeignKey(t => t.AddressTypeId);
			config.HasOne(t => t.BusinessEntity).WithMany(t => t.BusinessEntityAddresses).HasForeignKey(t => t.BusinessEntityId);
		}

		/// <summary>Defines the mapping information for the entity 'BusinessEntityContact'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapBusinessEntityContact(EntityTypeBuilder<BusinessEntityContact> config)
		{
			config.ToTable("BusinessEntityContact", "Person");
			config.HasKey(t => new { t.BusinessEntityId, t.ContactTypeId, t.PersonId });
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.PersonId).HasColumnName("PersonID");
			config.Property(t => t.ContactTypeId).HasColumnName("ContactTypeID");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.BusinessEntity).WithMany(t => t.BusinessEntityContacts).HasForeignKey(t => t.BusinessEntityId);
			config.HasOne(t => t.ContactType).WithMany(t => t.BusinessEntityContacts).HasForeignKey(t => t.ContactTypeId);
			config.HasOne(t => t.Person).WithMany(t => t.BusinessEntityContacts).HasForeignKey(t => t.PersonId);
		}

		/// <summary>Defines the mapping information for the entity 'ContactCreditCard'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapContactCreditCard(EntityTypeBuilder<ContactCreditCard> config)
		{
			config.ToTable("PersonCreditCard", "Sales");
			config.HasKey(t => new { t.ContactId, t.CreditCardId });
			config.Property(t => t.ContactId).HasColumnName("BusinessEntityID");
			config.Property(t => t.CreditCardId).HasColumnName("CreditCardID");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.CreditCard).WithMany(t => t.ContactCreditCards).HasForeignKey(t => t.CreditCardId);
			config.HasOne(t => t.Person).WithMany(t => t.ContactCreditCards).HasForeignKey(t => t.ContactId);
		}

		/// <summary>Defines the mapping information for the entity 'ContactType'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapContactType(EntityTypeBuilder<ContactType> config)
		{
			config.ToTable("ContactType", "Person");
			config.HasKey(t => t.ContactTypeId);
			config.Property(t => t.ContactTypeId).HasColumnName("ContactTypeID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'CountryRegion'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCountryRegion(EntityTypeBuilder<CountryRegion> config)
		{
			config.ToTable("CountryRegion", "Person");
			config.HasKey(t => t.CountryRegionCode);
			config.Property(t => t.CountryRegionCode).HasMaxLength(3);
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'CountryRegionCurrency'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCountryRegionCurrency(EntityTypeBuilder<CountryRegionCurrency> config)
		{
			config.ToTable("CountryRegionCurrency", "Sales");
			config.HasKey(t => new { t.CountryRegionCode, t.CurrencyCode });
			config.Property(t => t.CountryRegionCode).HasMaxLength(3);
			config.Property(t => t.CurrencyCode).HasMaxLength(3);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.CountryRegion).WithMany(t => t.CountryRegionCurrencies).HasForeignKey(t => t.CountryRegionCode);
			config.HasOne(t => t.Currency).WithMany(t => t.CountryRegionCurrencies).HasForeignKey(t => t.CurrencyCode);
		}

		/// <summary>Defines the mapping information for the entity 'CreditCard'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCreditCard(EntityTypeBuilder<CreditCard> config)
		{
			config.ToTable("CreditCard", "Sales");
			config.HasKey(t => t.CreditCardId);
			config.Property(t => t.CreditCardId).HasColumnName("CreditCardID").ValueGeneratedOnAdd();
			config.Property(t => t.CardType).HasMaxLength(50).IsRequired();
			config.Property(t => t.CardNumber).HasMaxLength(25).IsRequired();
			config.Property(t => t.ExpMonth);
			config.Property(t => t.ExpYear);
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Culture'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCulture(EntityTypeBuilder<Culture> config)
		{
			config.ToTable("Culture", "Production");
			config.HasKey(t => t.CultureId);
			config.Property(t => t.CultureId).HasColumnName("CultureID").HasMaxLength(6);
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Currency'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCurrency(EntityTypeBuilder<Currency> config)
		{
			config.ToTable("Currency", "Sales");
			config.HasKey(t => t.CurrencyCode);
			config.Property(t => t.CurrencyCode).HasMaxLength(3);
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'CurrencyRate'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCurrencyRate(EntityTypeBuilder<CurrencyRate> config)
		{
			config.ToTable("CurrencyRate", "Sales");
			config.HasKey(t => t.CurrencyRateId);
			config.Property(t => t.CurrencyRateId).HasColumnName("CurrencyRateID").ValueGeneratedOnAdd();
			config.Property(t => t.CurrencyRateDate);
			config.Property(t => t.FromCurrencyCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.ToCurrencyCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.AverageRate).HasColumnType("money");
			config.Property(t => t.EndOfDayRate).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Currency).WithMany(t => t.CurrencyRates).HasForeignKey(t => t.FromCurrencyCode);
			config.HasOne(t => t.Currency_).WithMany(t => t.CurrencyRates_).HasForeignKey(t => t.ToCurrencyCode);
		}

		/// <summary>Defines the mapping information for the entity 'Customer'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapCustomer(EntityTypeBuilder<Customer> config)
		{
			config.ToTable("Customer", "Sales");
			config.HasKey(t => t.CustomerId);
			config.Property(t => t.CustomerId).HasColumnName("CustomerID").ValueGeneratedOnAdd();
			config.Property(t => t.PersonId).HasColumnName("PersonID");
			config.Property(t => t.StoreId).HasColumnName("StoreID");
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID");
			config.Property(t => t.AccountNumber).HasMaxLength(10).ValueGeneratedOnAddOrUpdate().IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Person).WithMany(t => t.Customers).HasForeignKey(t => t.PersonId);
			config.HasOne(t => t.SalesTerritory).WithMany(t => t.Customers).HasForeignKey(t => t.TerritoryId);
			config.HasOne(t => t.Store).WithMany(t => t.Customers).HasForeignKey(t => t.StoreId);
		}

		/// <summary>Defines the mapping information for the entity 'Department'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapDepartment(EntityTypeBuilder<Department> config)
		{
			config.ToTable("Department", "HumanResources");
			config.HasKey(t => t.DepartmentId);
			config.Property(t => t.DepartmentId).HasColumnName("DepartmentID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.GroupName).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Document'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapDocument(EntityTypeBuilder<Document> config)
		{
			config.ToTable("Document", "Production");
			config.HasKey(t => t.DocumentNode);
			config.Property(t => t.DocumentNode).HasMaxLength(892);
			config.Property(t => t.DocumentLevel).ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.Title).HasMaxLength(50).IsRequired();
			config.Property(t => t.Owner);
			config.Property(t => t.FolderFlag);
			config.Property(t => t.FileName).HasMaxLength(400).IsRequired();
			config.Property(t => t.FileExtension).HasMaxLength(8).IsRequired();
			config.Property(t => t.Revision).HasMaxLength(5).IsRequired();
			config.Property(t => t.ChangeNumber);
			config.Property(t => t.Status);
			config.Property(t => t.DocumentSummary);
			config.Property(t => t.DocumentValue).HasColumnName("Document");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Employee).WithMany(t => t.Documents).HasForeignKey(t => t.Owner);
		}

		/// <summary>Defines the mapping information for the entity 'EmailAddress'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmailAddress(EntityTypeBuilder<EmailAddress> config)
		{
			config.ToTable("EmailAddress", "Person");
			config.HasKey(t => new { t.BusinessEntityId, t.EmailAddressId });
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.EmailAddressId).HasColumnName("EmailAddressID").ValueGeneratedOnAdd();
			config.Property(t => t.EmailAddressValue).HasColumnName("EmailAddress").HasMaxLength(50);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Person).WithMany(t => t.EmailAddresses).HasForeignKey(t => t.BusinessEntityId);
		}

		/// <summary>Defines the mapping information for the entity 'Employee'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmployee(EntityTypeBuilder<Employee> config)
		{
			config.ToTable("Employee", "HumanResources");
			config.HasKey(t => t.EmployeeId);
			config.Property(t => t.EmployeeId).HasColumnName("BusinessEntityID");
			config.Property(t => t.NationalIdnumber).HasColumnName("NationalIDNumber").HasMaxLength(15).IsRequired();
			config.Property(t => t.LoginId).HasColumnName("LoginID").HasMaxLength(256).IsRequired();
			config.Property(t => t.OrganizationNode).HasMaxLength(892);
			config.Property(t => t.OrganizationLevel).ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.Title).HasColumnName("JobTitle").HasMaxLength(50).IsRequired();
			config.Property(t => t.BirthDate);
			config.Property(t => t.MaritalStatus).HasMaxLength(1).IsRequired();
			config.Property(t => t.Gender).HasMaxLength(1).IsRequired();
			config.Property(t => t.HireDate);
			config.Property(t => t.SalariedFlag);
			config.Property(t => t.VacationHours);
			config.Property(t => t.SickLeaveHours);
			config.Property(t => t.CurrentFlag);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Person).WithOne(t => t.Employee).HasForeignKey<Employee>(t => t.EmployeeId);
		}

		/// <summary>Defines the mapping information for the entity 'EmployeeDepartmentHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmployeeDepartmentHistory(EntityTypeBuilder<EmployeeDepartmentHistory> config)
		{
			config.ToTable("EmployeeDepartmentHistory", "HumanResources");
			config.HasKey(t => new { t.DepartmentId, t.EmployeeId, t.ShiftId, t.StartDate });
			config.Property(t => t.EmployeeId).HasColumnName("BusinessEntityID");
			config.Property(t => t.DepartmentId).HasColumnName("DepartmentID");
			config.Property(t => t.ShiftId).HasColumnName("ShiftID");
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Department).WithMany(t => t.EmployeeDepartmentHistories).HasForeignKey(t => t.DepartmentId);
			config.HasOne(t => t.Employee).WithMany(t => t.EmployeeDepartmentHistories).HasForeignKey(t => t.EmployeeId);
			config.HasOne(t => t.Shift).WithMany(t => t.EmployeeDepartmentHistories).HasForeignKey(t => t.ShiftId);
		}

		/// <summary>Defines the mapping information for the entity 'EmployeePayHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapEmployeePayHistory(EntityTypeBuilder<EmployeePayHistory> config)
		{
			config.ToTable("EmployeePayHistory", "HumanResources");
			config.HasKey(t => new { t.EmployeeId, t.RateChangeDate });
			config.Property(t => t.EmployeeId).HasColumnName("BusinessEntityID");
			config.Property(t => t.RateChangeDate);
			config.Property(t => t.Rate).HasColumnType("money");
			config.Property(t => t.PayFrequency);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Employee).WithMany(t => t.EmployeePayHistories).HasForeignKey(t => t.EmployeeId);
		}

		/// <summary>Defines the mapping information for the entity 'Illustration'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapIllustration(EntityTypeBuilder<Illustration> config)
		{
			config.ToTable("Illustration", "Production");
			config.HasKey(t => t.IllustrationId);
			config.Property(t => t.IllustrationId).HasColumnName("IllustrationID").ValueGeneratedOnAdd();
			config.Property(t => t.Diagram);
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'JobCandidate'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapJobCandidate(EntityTypeBuilder<JobCandidate> config)
		{
			config.ToTable("JobCandidate", "HumanResources");
			config.HasKey(t => t.JobCandidateId);
			config.Property(t => t.JobCandidateId).HasColumnName("JobCandidateID").ValueGeneratedOnAdd();
			config.Property(t => t.EmployeeId).HasColumnName("BusinessEntityID");
			config.Property(t => t.Resume);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Employee).WithMany(t => t.JobCandidates).HasForeignKey(t => t.EmployeeId);
		}

		/// <summary>Defines the mapping information for the entity 'Location'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapLocation(EntityTypeBuilder<Location> config)
		{
			config.ToTable("Location", "Production");
			config.HasKey(t => t.LocationId);
			config.Property(t => t.LocationId).HasColumnName("LocationID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.CostRate).HasColumnType("smallmoney");
			config.Property(t => t.Availability).HasColumnType("decimal(8,2)");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Password'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPassword(EntityTypeBuilder<Password> config)
		{
			config.ToTable("Password", "Person");
			config.HasKey(t => t.BusinessEntityId);
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.PasswordHash).HasMaxLength(128).IsRequired();
			config.Property(t => t.PasswordSalt).HasMaxLength(10).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Person).WithOne(t => t.Password).HasForeignKey<Password>(t => t.BusinessEntityId);
		}

		/// <summary>Defines the mapping information for the entity 'Person'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPerson(EntityTypeBuilder<Person> config)
		{
			config.ToTable("Person", "Person");
			config.HasKey(t => t.BusinessEntityId);
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.PersonType).HasMaxLength(2).IsRequired();
			config.Property(t => t.NameStyle);
			config.Property(t => t.Title).HasMaxLength(8);
			config.Property(t => t.FirstName).HasMaxLength(50).IsRequired();
			config.Property(t => t.MiddleName).HasMaxLength(50);
			config.Property(t => t.LastName).HasMaxLength(50).IsRequired();
			config.Property(t => t.Suffix).HasMaxLength(10);
			config.Property(t => t.EmailPromotion);
			config.Property(t => t.AdditionalContactInfo);
			config.Property(t => t.Demographics);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.BusinessEntity).WithOne(t => t.Person).HasForeignKey<Person>(t => t.BusinessEntityId);
		}

		/// <summary>Defines the mapping information for the entity 'PersonPhone'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPersonPhone(EntityTypeBuilder<PersonPhone> config)
		{
			config.ToTable("PersonPhone", "Person");
			config.HasKey(t => new { t.BusinessEntityId, t.PhoneNumber, t.PhoneNumberTypeId });
			config.Property(t => t.BusinessEntityId).HasColumnName("BusinessEntityID");
			config.Property(t => t.PhoneNumber).HasMaxLength(25);
			config.Property(t => t.PhoneNumberTypeId).HasColumnName("PhoneNumberTypeID");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Person).WithMany(t => t.PersonPhones).HasForeignKey(t => t.BusinessEntityId);
			config.HasOne(t => t.PhoneNumberType).WithMany(t => t.PersonPhones).HasForeignKey(t => t.PhoneNumberTypeId);
		}

		/// <summary>Defines the mapping information for the entity 'PhoneNumberType'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPhoneNumberType(EntityTypeBuilder<PhoneNumberType> config)
		{
			config.ToTable("PhoneNumberType", "Person");
			config.HasKey(t => t.PhoneNumberTypeId);
			config.Property(t => t.PhoneNumberTypeId).HasColumnName("PhoneNumberTypeID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Product'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProduct(EntityTypeBuilder<Product> config)
		{
			config.ToTable("Product", "Production");
			config.HasKey(t => t.ProductId);
			config.Property(t => t.ProductId).HasColumnName("ProductID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ProductNumber).HasMaxLength(25).IsRequired();
			config.Property(t => t.MakeFlag);
			config.Property(t => t.FinishedGoodsFlag);
			config.Property(t => t.Color).HasMaxLength(15);
			config.Property(t => t.SafetyStockLevel);
			config.Property(t => t.ReorderPoint);
			config.Property(t => t.StandardCost).HasColumnType("money");
			config.Property(t => t.ListPrice).HasColumnType("money");
			config.Property(t => t.Size).HasMaxLength(5);
			config.Property(t => t.SizeUnitMeasureCode).HasMaxLength(3);
			config.Property(t => t.WeightUnitMeasureCode).HasMaxLength(3);
			config.Property(t => t.Weight).HasColumnType("decimal(8,2)");
			config.Property(t => t.DaysToManufacture);
			config.Property(t => t.ProductLine).HasMaxLength(2);
			config.Property(t => t.Class).HasMaxLength(2);
			config.Property(t => t.Style).HasMaxLength(2);
			config.Property(t => t.ProductSubcategoryId).HasColumnName("ProductSubcategoryID");
			config.Property(t => t.ProductModelId).HasColumnName("ProductModelID");
			config.Property(t => t.SellStartDate);
			config.Property(t => t.SellEndDate);
			config.Property(t => t.DiscontinuedDate);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.ProductModel).WithMany(t => t.Products).HasForeignKey(t => t.ProductModelId);
			config.HasOne(t => t.ProductSubcategory).WithMany(t => t.Products).HasForeignKey(t => t.ProductSubcategoryId);
			config.HasOne(t => t.UnitMeasure).WithMany(t => t.Products).HasForeignKey(t => t.SizeUnitMeasureCode);
			config.HasOne(t => t.UnitMeasure_).WithMany(t => t.Products_).HasForeignKey(t => t.WeightUnitMeasureCode);
		}

		/// <summary>Defines the mapping information for the entity 'ProductCategory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductCategory(EntityTypeBuilder<ProductCategory> config)
		{
			config.ToTable("ProductCategory", "Production");
			config.HasKey(t => t.ProductCategoryId);
			config.Property(t => t.ProductCategoryId).HasColumnName("ProductCategoryID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ProductCostHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductCostHistory(EntityTypeBuilder<ProductCostHistory> config)
		{
			config.ToTable("ProductCostHistory", "Production");
			config.HasKey(t => new { t.ProductId, t.StartDate });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.StandardCost).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ProductCostHistories).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductDescription'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductDescription(EntityTypeBuilder<ProductDescription> config)
		{
			config.ToTable("ProductDescription", "Production");
			config.HasKey(t => t.ProductDescriptionId);
			config.Property(t => t.ProductDescriptionId).HasColumnName("ProductDescriptionID").ValueGeneratedOnAdd();
			config.Property(t => t.Description).HasMaxLength(400).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ProductDocument'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductDocument(EntityTypeBuilder<ProductDocument> config)
		{
			config.ToTable("ProductDocument", "Production");
			config.HasKey(t => new { t.DocumentNode, t.ProductId });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.DocumentNode).HasMaxLength(892);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Document).WithMany(t => t.ProductDocuments).HasForeignKey(t => t.DocumentNode);
			config.HasOne(t => t.Product).WithMany(t => t.ProductDocuments).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductInventory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductInventory(EntityTypeBuilder<ProductInventory> config)
		{
			config.ToTable("ProductInventory", "Production");
			config.HasKey(t => new { t.LocationId, t.ProductId });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.LocationId).HasColumnName("LocationID");
			config.Property(t => t.Shelf).HasMaxLength(10).IsRequired();
			config.Property(t => t.Bin);
			config.Property(t => t.Quantity);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Location).WithMany(t => t.ProductInventories).HasForeignKey(t => t.LocationId);
			config.HasOne(t => t.Product).WithMany(t => t.ProductInventories).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductListPriceHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductListPriceHistory(EntityTypeBuilder<ProductListPriceHistory> config)
		{
			config.ToTable("ProductListPriceHistory", "Production");
			config.HasKey(t => new { t.ProductId, t.StartDate });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.ListPrice).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ProductListPriceHistories).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductModel'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductModel(EntityTypeBuilder<ProductModel> config)
		{
			config.ToTable("ProductModel", "Production");
			config.HasKey(t => t.ProductModelId);
			config.Property(t => t.ProductModelId).HasColumnName("ProductModelID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.CatalogDescription);
			config.Property(t => t.Instructions);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ProductModelIllustration'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductModelIllustration(EntityTypeBuilder<ProductModelIllustration> config)
		{
			config.ToTable("ProductModelIllustration", "Production");
			config.HasKey(t => new { t.IllustrationId, t.ProductModelId });
			config.Property(t => t.ProductModelId).HasColumnName("ProductModelID");
			config.Property(t => t.IllustrationId).HasColumnName("IllustrationID");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Illustration).WithMany(t => t.ProductModelIllustrations).HasForeignKey(t => t.IllustrationId);
			config.HasOne(t => t.ProductModel).WithMany(t => t.ProductModelIllustrations).HasForeignKey(t => t.ProductModelId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductModelProductDescriptionCulture'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductModelProductDescriptionCulture(EntityTypeBuilder<ProductModelProductDescriptionCulture> config)
		{
			config.ToTable("ProductModelProductDescriptionCulture", "Production");
			config.HasKey(t => new { t.CultureId, t.ProductDescriptionId, t.ProductModelId });
			config.Property(t => t.ProductModelId).HasColumnName("ProductModelID");
			config.Property(t => t.ProductDescriptionId).HasColumnName("ProductDescriptionID");
			config.Property(t => t.CultureId).HasColumnName("CultureID").HasMaxLength(6);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Culture).WithMany(t => t.ProductModelProductDescriptionCultures).HasForeignKey(t => t.CultureId);
			config.HasOne(t => t.ProductDescription).WithMany(t => t.ProductModelProductDescriptionCultures).HasForeignKey(t => t.ProductDescriptionId);
			config.HasOne(t => t.ProductModel).WithMany(t => t.ProductModelProductDescriptionCultures).HasForeignKey(t => t.ProductModelId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductPhoto'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductPhoto(EntityTypeBuilder<ProductPhoto> config)
		{
			config.ToTable("ProductPhoto", "Production");
			config.HasKey(t => t.ProductPhotoId);
			config.Property(t => t.ProductPhotoId).HasColumnName("ProductPhotoID").ValueGeneratedOnAdd();
			config.Property(t => t.ThumbNailPhoto);
			config.Property(t => t.ThumbnailPhotoFileName).HasMaxLength(50);
			config.Property(t => t.LargePhoto);
			config.Property(t => t.LargePhotoFileName).HasMaxLength(50);
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ProductProductPhoto'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductProductPhoto(EntityTypeBuilder<ProductProductPhoto> config)
		{
			config.ToTable("ProductProductPhoto", "Production");
			config.HasKey(t => new { t.ProductId, t.ProductPhotoId });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.ProductPhotoId).HasColumnName("ProductPhotoID");
			config.Property(t => t.Primary);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ProductProductPhotos).HasForeignKey(t => t.ProductId);
			config.HasOne(t => t.ProductPhoto).WithMany(t => t.ProductProductPhotos).HasForeignKey(t => t.ProductPhotoId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductReview'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductReview(EntityTypeBuilder<ProductReview> config)
		{
			config.ToTable("ProductReview", "Production");
			config.HasKey(t => t.ProductReviewId);
			config.Property(t => t.ProductReviewId).HasColumnName("ProductReviewID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.ReviewerName).HasMaxLength(50).IsRequired();
			config.Property(t => t.ReviewDate);
			config.Property(t => t.EmailAddress).HasMaxLength(50).IsRequired();
			config.Property(t => t.Rating);
			config.Property(t => t.Comments).HasMaxLength(3850);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ProductReviews).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductSubcategory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductSubcategory(EntityTypeBuilder<ProductSubcategory> config)
		{
			config.ToTable("ProductSubcategory", "Production");
			config.HasKey(t => t.ProductSubcategoryId);
			config.Property(t => t.ProductSubcategoryId).HasColumnName("ProductSubcategoryID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductCategoryId).HasColumnName("ProductCategoryID");
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.ProductCategory).WithMany(t => t.ProductSubcategories).HasForeignKey(t => t.ProductCategoryId);
		}

		/// <summary>Defines the mapping information for the entity 'ProductVendor'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapProductVendor(EntityTypeBuilder<ProductVendor> config)
		{
			config.ToTable("ProductVendor", "Purchasing");
			config.HasKey(t => new { t.ProductId, t.VendorId });
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.VendorId).HasColumnName("BusinessEntityID");
			config.Property(t => t.AverageLeadTime);
			config.Property(t => t.StandardPrice).HasColumnType("money");
			config.Property(t => t.LastReceiptCost).HasColumnType("money");
			config.Property(t => t.LastReceiptDate);
			config.Property(t => t.MinOrderQty);
			config.Property(t => t.MaxOrderQty);
			config.Property(t => t.OnOrderQty);
			config.Property(t => t.UnitMeasureCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ProductVendors).HasForeignKey(t => t.ProductId);
			config.HasOne(t => t.UnitMeasure).WithMany(t => t.ProductVendors).HasForeignKey(t => t.UnitMeasureCode);
			config.HasOne(t => t.Vendor).WithMany(t => t.ProductVendors).HasForeignKey(t => t.VendorId);
		}

		/// <summary>Defines the mapping information for the entity 'PurchaseOrderDetail'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPurchaseOrderDetail(EntityTypeBuilder<PurchaseOrderDetail> config)
		{
			config.ToTable("PurchaseOrderDetail", "Purchasing");
			config.HasKey(t => new { t.PurchaseOrderDetailId, t.PurchaseOrderId });
			config.Property(t => t.PurchaseOrderId).HasColumnName("PurchaseOrderID");
			config.Property(t => t.PurchaseOrderDetailId).HasColumnName("PurchaseOrderDetailID").ValueGeneratedOnAdd();
			config.Property(t => t.DueDate);
			config.Property(t => t.OrderQty);
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.UnitPrice).HasColumnType("money");
			config.Property(t => t.LineTotal).HasColumnType("money").ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.ReceivedQty).HasColumnType("decimal(8,2)");
			config.Property(t => t.RejectedQty).HasColumnType("decimal(8,2)");
			config.Property(t => t.StockedQty).HasColumnType("decimal(9,2)").ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.PurchaseOrderDetails).HasForeignKey(t => t.ProductId);
			config.HasOne(t => t.PurchaseOrderHeader).WithMany(t => t.PurchaseOrderDetails).HasForeignKey(t => t.PurchaseOrderId);
		}

		/// <summary>Defines the mapping information for the entity 'PurchaseOrderHeader'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapPurchaseOrderHeader(EntityTypeBuilder<PurchaseOrderHeader> config)
		{
			config.ToTable("PurchaseOrderHeader", "Purchasing");
			config.HasKey(t => t.PurchaseOrderId);
			config.Property(t => t.PurchaseOrderId).HasColumnName("PurchaseOrderID").ValueGeneratedOnAdd();
			config.Property(t => t.RevisionNumber);
			config.Property(t => t.Status);
			config.Property(t => t.EmployeeId).HasColumnName("EmployeeID");
			config.Property(t => t.VendorId).HasColumnName("VendorID");
			config.Property(t => t.ShipMethodId).HasColumnName("ShipMethodID");
			config.Property(t => t.OrderDate);
			config.Property(t => t.ShipDate);
			config.Property(t => t.SubTotal).HasColumnType("money");
			config.Property(t => t.TaxAmt).HasColumnType("money");
			config.Property(t => t.Freight).HasColumnType("money");
			config.Property(t => t.TotalDue).HasColumnType("money").ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Employee).WithMany(t => t.PurchaseOrderHeaders).HasForeignKey(t => t.EmployeeId);
			config.HasOne(t => t.ShipMethod).WithMany(t => t.PurchaseOrderHeaders).HasForeignKey(t => t.ShipMethodId);
			config.HasOne(t => t.Vendor).WithMany(t => t.PurchaseOrderHeaders).HasForeignKey(t => t.VendorId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesOrderDetail'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesOrderDetail(EntityTypeBuilder<SalesOrderDetail> config)
		{
			config.ToTable("SalesOrderDetail", "Sales");
			config.HasKey(t => new { t.SalesOrderDetailId, t.SalesOrderId });
			config.Property(t => t.SalesOrderId).HasColumnName("SalesOrderID");
			config.Property(t => t.SalesOrderDetailId).HasColumnName("SalesOrderDetailID").ValueGeneratedOnAdd();
			config.Property(t => t.CarrierTrackingNumber).HasMaxLength(25);
			config.Property(t => t.OrderQty);
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.SpecialOfferId).HasColumnName("SpecialOfferID");
			config.Property(t => t.UnitPrice).HasColumnType("money");
			config.Property(t => t.UnitPriceDiscount).HasColumnType("money");
			config.Property(t => t.LineTotal).HasColumnType("numeric(38,6)").ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.SalesOrderHeader).WithMany(t => t.SalesOrderDetails).HasForeignKey(t => t.SalesOrderId).OnDelete(DeleteBehavior.Cascade);
			config.HasOne(t => t.SpecialOfferProduct).WithMany(t => t.SalesOrderDetails).HasForeignKey(t => new { t.ProductId, t.SpecialOfferId });
		}

		/// <summary>Defines the mapping information for the entity 'SalesOrderHeader'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesOrderHeader(EntityTypeBuilder<SalesOrderHeader> config)
		{
			config.ToTable("SalesOrderHeader", "Sales");
			config.HasKey(t => t.SalesOrderId);
			config.Property(t => t.SalesOrderId).HasColumnName("SalesOrderID").ValueGeneratedOnAdd();
			config.Property(t => t.RevisionNumber);
			config.Property(t => t.OrderDate);
			config.Property(t => t.DueDate);
			config.Property(t => t.ShipDate);
			config.Property(t => t.Status);
			config.Property(t => t.OnlineOrderFlag);
			config.Property(t => t.SalesOrderNumber).HasMaxLength(25).ValueGeneratedOnAddOrUpdate().IsRequired();
			config.Property(t => t.PurchaseOrderNumber).HasMaxLength(25);
			config.Property(t => t.AccountNumber).HasMaxLength(15);
			config.Property(t => t.CustomerId).HasColumnName("CustomerID");
			config.Property(t => t.SalesPersonId).HasColumnName("SalesPersonID");
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID");
			config.Property(t => t.BillToAddressId).HasColumnName("BillToAddressID");
			config.Property(t => t.ShipToAddressId).HasColumnName("ShipToAddressID");
			config.Property(t => t.ShipMethodId).HasColumnName("ShipMethodID");
			config.Property(t => t.CreditCardId).HasColumnName("CreditCardID");
			config.Property(t => t.CreditCardApprovalCode).HasMaxLength(15);
			config.Property(t => t.CurrencyRateId).HasColumnName("CurrencyRateID");
			config.Property(t => t.SubTotal).HasColumnType("money");
			config.Property(t => t.TaxAmt).HasColumnType("money");
			config.Property(t => t.Freight).HasColumnType("money");
			config.Property(t => t.TotalDue).HasColumnType("money").ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.Comment).HasMaxLength(128);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Address).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.BillToAddressId);
			config.HasOne(t => t.Address_).WithMany(t => t.SalesOrderHeaders_).HasForeignKey(t => t.ShipToAddressId);
			config.HasOne(t => t.CreditCard).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.CreditCardId);
			config.HasOne(t => t.CurrencyRate).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.CurrencyRateId);
			config.HasOne(t => t.Customer).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.CustomerId);
			config.HasOne(t => t.SalesPerson).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.SalesPersonId);
			config.HasOne(t => t.SalesTerritory).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.TerritoryId);
			config.HasOne(t => t.ShipMethod).WithMany(t => t.SalesOrderHeaders).HasForeignKey(t => t.ShipMethodId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesOrderHeaderSalesReason'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesOrderHeaderSalesReason(EntityTypeBuilder<SalesOrderHeaderSalesReason> config)
		{
			config.ToTable("SalesOrderHeaderSalesReason", "Sales");
			config.HasKey(t => new { t.SalesOrderId, t.SalesReasonId });
			config.Property(t => t.SalesOrderId).HasColumnName("SalesOrderID");
			config.Property(t => t.SalesReasonId).HasColumnName("SalesReasonID");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.SalesOrderHeader).WithMany(t => t.SalesOrderHeaderSalesReasons).HasForeignKey(t => t.SalesOrderId).OnDelete(DeleteBehavior.Cascade);
			config.HasOne(t => t.SalesReason).WithMany(t => t.SalesOrderHeaderSalesReasons).HasForeignKey(t => t.SalesReasonId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesPerson'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesPerson(EntityTypeBuilder<SalesPerson> config)
		{
			config.ToTable("SalesPerson", "Sales");
			config.HasKey(t => t.SalesPersonId);
			config.Property(t => t.SalesPersonId).HasColumnName("BusinessEntityID");
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID");
			config.Property(t => t.SalesQuota).HasColumnType("money");
			config.Property(t => t.Bonus).HasColumnType("money");
			config.Property(t => t.CommissionPct).HasColumnType("smallmoney");
			config.Property(t => t.SalesYtd).HasColumnName("SalesYTD").HasColumnType("money");
			config.Property(t => t.SalesLastYear).HasColumnType("money");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Employee).WithOne(t => t.SalesPerson).HasForeignKey<SalesPerson>(t => t.SalesPersonId);
			config.HasOne(t => t.SalesTerritory).WithMany(t => t.SalesPeople).HasForeignKey(t => t.TerritoryId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesPersonQuotaHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesPersonQuotaHistory(EntityTypeBuilder<SalesPersonQuotaHistory> config)
		{
			config.ToTable("SalesPersonQuotaHistory", "Sales");
			config.HasKey(t => new { t.QuotaDate, t.SalesPersonId });
			config.Property(t => t.SalesPersonId).HasColumnName("BusinessEntityID");
			config.Property(t => t.QuotaDate);
			config.Property(t => t.SalesQuota).HasColumnType("money");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.SalesPerson).WithMany(t => t.SalesPersonQuotaHistories).HasForeignKey(t => t.SalesPersonId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesReason'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesReason(EntityTypeBuilder<SalesReason> config)
		{
			config.ToTable("SalesReason", "Sales");
			config.HasKey(t => t.SalesReasonId);
			config.Property(t => t.SalesReasonId).HasColumnName("SalesReasonID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ReasonType).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'SalesTaxRate'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesTaxRate(EntityTypeBuilder<SalesTaxRate> config)
		{
			config.ToTable("SalesTaxRate", "Sales");
			config.HasKey(t => t.SalesTaxRateId);
			config.Property(t => t.SalesTaxRateId).HasColumnName("SalesTaxRateID").ValueGeneratedOnAdd();
			config.Property(t => t.StateProvinceId).HasColumnName("StateProvinceID");
			config.Property(t => t.TaxType);
			config.Property(t => t.TaxRate).HasColumnType("smallmoney");
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.StateProvince).WithMany(t => t.SalesTaxRates).HasForeignKey(t => t.StateProvinceId);
		}

		/// <summary>Defines the mapping information for the entity 'SalesTerritory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesTerritory(EntityTypeBuilder<SalesTerritory> config)
		{
			config.ToTable("SalesTerritory", "Sales");
			config.HasKey(t => t.TerritoryId);
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.CountryRegionCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.Group).HasMaxLength(50).IsRequired();
			config.Property(t => t.SalesYtd).HasColumnName("SalesYTD").HasColumnType("money");
			config.Property(t => t.SalesLastYear).HasColumnType("money");
			config.Property(t => t.CostYtd).HasColumnName("CostYTD").HasColumnType("money");
			config.Property(t => t.CostLastYear).HasColumnType("money");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.CountryRegion).WithMany(t => t.SalesTerritories).HasForeignKey(t => t.CountryRegionCode);
		}

		/// <summary>Defines the mapping information for the entity 'SalesTerritoryHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSalesTerritoryHistory(EntityTypeBuilder<SalesTerritoryHistory> config)
		{
			config.ToTable("SalesTerritoryHistory", "Sales");
			config.HasKey(t => new { t.SalesPersonId, t.StartDate, t.TerritoryId });
			config.Property(t => t.SalesPersonId).HasColumnName("BusinessEntityID");
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID");
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.SalesPerson).WithMany(t => t.SalesTerritoryHistories).HasForeignKey(t => t.SalesPersonId);
			config.HasOne(t => t.SalesTerritory).WithMany(t => t.SalesTerritoryHistories).HasForeignKey(t => t.TerritoryId);
		}

		/// <summary>Defines the mapping information for the entity 'ScrapReason'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapScrapReason(EntityTypeBuilder<ScrapReason> config)
		{
			config.ToTable("ScrapReason", "Production");
			config.HasKey(t => t.ScrapReasonId);
			config.Property(t => t.ScrapReasonId).HasColumnName("ScrapReasonID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Shift'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapShift(EntityTypeBuilder<Shift> config)
		{
			config.ToTable("Shift", "HumanResources");
			config.HasKey(t => t.ShiftId);
			config.Property(t => t.ShiftId).HasColumnName("ShiftID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.StartTime);
			config.Property(t => t.EndTime);
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ShipMethod'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapShipMethod(EntityTypeBuilder<ShipMethod> config)
		{
			config.ToTable("ShipMethod", "Purchasing");
			config.HasKey(t => t.ShipMethodId);
			config.Property(t => t.ShipMethodId).HasColumnName("ShipMethodID").ValueGeneratedOnAdd();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ShipBase).HasColumnType("money");
			config.Property(t => t.ShipRate).HasColumnType("money");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'ShoppingCartItem'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapShoppingCartItem(EntityTypeBuilder<ShoppingCartItem> config)
		{
			config.ToTable("ShoppingCartItem", "Sales");
			config.HasKey(t => t.ShoppingCartItemId);
			config.Property(t => t.ShoppingCartItemId).HasColumnName("ShoppingCartItemID").ValueGeneratedOnAdd();
			config.Property(t => t.ShoppingCartId).HasColumnName("ShoppingCartID").HasMaxLength(50).IsRequired();
			config.Property(t => t.Quantity);
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.DateCreated);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.ShoppingCartItems).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'SpecialOffer'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSpecialOffer(EntityTypeBuilder<SpecialOffer> config)
		{
			config.ToTable("SpecialOffer", "Sales");
			config.HasKey(t => t.SpecialOfferId);
			config.Property(t => t.SpecialOfferId).HasColumnName("SpecialOfferID").ValueGeneratedOnAdd();
			config.Property(t => t.Description).HasMaxLength(255).IsRequired();
			config.Property(t => t.DiscountPct).HasColumnType("smallmoney");
			config.Property(t => t.Type).HasMaxLength(50).IsRequired();
			config.Property(t => t.Category).HasMaxLength(50).IsRequired();
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.MinQty);
			config.Property(t => t.MaxQty);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'SpecialOfferProduct'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapSpecialOfferProduct(EntityTypeBuilder<SpecialOfferProduct> config)
		{
			config.ToTable("SpecialOfferProduct", "Sales");
			config.HasKey(t => new { t.ProductId, t.SpecialOfferId });
			config.Property(t => t.SpecialOfferId).HasColumnName("SpecialOfferID");
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.SpecialOfferProducts).HasForeignKey(t => t.ProductId);
			config.HasOne(t => t.SpecialOffer).WithMany(t => t.SpecialOfferProducts).HasForeignKey(t => t.SpecialOfferId);
		}

		/// <summary>Defines the mapping information for the entity 'StateProvince'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapStateProvince(EntityTypeBuilder<StateProvince> config)
		{
			config.ToTable("StateProvince", "Person");
			config.HasKey(t => t.StateProvinceId);
			config.Property(t => t.StateProvinceId).HasColumnName("StateProvinceID").ValueGeneratedOnAdd();
			config.Property(t => t.StateProvinceCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.CountryRegionCode).HasMaxLength(3).IsRequired();
			config.Property(t => t.IsOnlyStateProvinceFlag);
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.TerritoryId).HasColumnName("TerritoryID");
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.CountryRegion).WithMany(t => t.StateProvinces).HasForeignKey(t => t.CountryRegionCode);
			config.HasOne(t => t.SalesTerritory).WithMany(t => t.StateProvinces).HasForeignKey(t => t.TerritoryId);
		}

		/// <summary>Defines the mapping information for the entity 'Store'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapStore(EntityTypeBuilder<Store> config)
		{
			config.ToTable("Store", "Sales");
			config.HasKey(t => t.CustomerId);
			config.Property(t => t.CustomerId).HasColumnName("BusinessEntityID");
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.SalesPersonId).HasColumnName("SalesPersonID");
			config.Property(t => t.Demographics);
			config.Property(t => t.Rowguid).HasColumnName("rowguid");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.BusinessEntity).WithOne(t => t.Store).HasForeignKey<Store>(t => t.CustomerId);
			config.HasOne(t => t.SalesPerson).WithMany(t => t.Stores).HasForeignKey(t => t.SalesPersonId);
		}

		/// <summary>Defines the mapping information for the entity 'TransactionHistory'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapTransactionHistory(EntityTypeBuilder<TransactionHistory> config)
		{
			config.ToTable("TransactionHistory", "Production");
			config.HasKey(t => t.TransactionId);
			config.Property(t => t.TransactionId).HasColumnName("TransactionID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.ReferenceOrderId).HasColumnName("ReferenceOrderID");
			config.Property(t => t.ReferenceOrderLineId).HasColumnName("ReferenceOrderLineID");
			config.Property(t => t.TransactionDate);
			config.Property(t => t.TransactionType).HasMaxLength(1).IsRequired();
			config.Property(t => t.Quantity);
			config.Property(t => t.ActualCost).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.TransactionHistories).HasForeignKey(t => t.ProductId);
		}

		/// <summary>Defines the mapping information for the entity 'TransactionHistoryArchive'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapTransactionHistoryArchive(EntityTypeBuilder<TransactionHistoryArchive> config)
		{
			config.ToTable("TransactionHistoryArchive", "Production");
			config.HasKey(t => t.TransactionId);
			config.Property(t => t.TransactionId).HasColumnName("TransactionID");
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.ReferenceOrderId).HasColumnName("ReferenceOrderID");
			config.Property(t => t.ReferenceOrderLineId).HasColumnName("ReferenceOrderLineID");
			config.Property(t => t.TransactionDate);
			config.Property(t => t.TransactionType).HasMaxLength(1).IsRequired();
			config.Property(t => t.Quantity);
			config.Property(t => t.ActualCost).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'UnitMeasure'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapUnitMeasure(EntityTypeBuilder<UnitMeasure> config)
		{
			config.ToTable("UnitMeasure", "Production");
			config.HasKey(t => t.UnitMeasureCode);
			config.Property(t => t.UnitMeasureCode).HasMaxLength(3);
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.ModifiedDate);
		}

		/// <summary>Defines the mapping information for the entity 'Vendor'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapVendor(EntityTypeBuilder<Vendor> config)
		{
			config.ToTable("Vendor", "Purchasing");
			config.HasKey(t => t.VendorId);
			config.Property(t => t.VendorId).HasColumnName("BusinessEntityID");
			config.Property(t => t.AccountNumber).HasMaxLength(15).IsRequired();
			config.Property(t => t.Name).HasMaxLength(50).IsRequired();
			config.Property(t => t.CreditRating);
			config.Property(t => t.PreferredVendorStatus);
			config.Property(t => t.ActiveFlag);
			config.Property(t => t.PurchasingWebServiceUrl).HasColumnName("PurchasingWebServiceURL").HasMaxLength(1024);
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.BusinessEntity).WithOne(t => t.Vendor).HasForeignKey<Vendor>(t => t.VendorId);
		}

		/// <summary>Defines the mapping information for the entity 'WorkOrder'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapWorkOrder(EntityTypeBuilder<WorkOrder> config)
		{
			config.ToTable("WorkOrder", "Production");
			config.HasKey(t => t.WorkOrderId);
			config.Property(t => t.WorkOrderId).HasColumnName("WorkOrderID").ValueGeneratedOnAdd();
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.OrderQty);
			config.Property(t => t.StockedQty).ValueGeneratedOnAddOrUpdate();
			config.Property(t => t.ScrappedQty);
			config.Property(t => t.StartDate);
			config.Property(t => t.EndDate);
			config.Property(t => t.DueDate);
			config.Property(t => t.ScrapReasonId).HasColumnName("ScrapReasonID");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Product).WithMany(t => t.WorkOrders).HasForeignKey(t => t.ProductId);
			config.HasOne(t => t.ScrapReason).WithMany(t => t.WorkOrders).HasForeignKey(t => t.ScrapReasonId);
		}

		/// <summary>Defines the mapping information for the entity 'WorkOrderRouting'</summary>
		/// <param name="config">The configuration to modify.</param>
		protected virtual void MapWorkOrderRouting(EntityTypeBuilder<WorkOrderRouting> config)
		{
			config.ToTable("WorkOrderRouting", "Production");
			config.HasKey(t => new { t.OperationSequence, t.ProductId, t.WorkOrderId });
			config.Property(t => t.WorkOrderId).HasColumnName("WorkOrderID");
			config.Property(t => t.ProductId).HasColumnName("ProductID");
			config.Property(t => t.OperationSequence);
			config.Property(t => t.LocationId).HasColumnName("LocationID");
			config.Property(t => t.ScheduledStartDate);
			config.Property(t => t.ScheduledEndDate);
			config.Property(t => t.ActualStartDate);
			config.Property(t => t.ActualEndDate);
			config.Property(t => t.ActualResourceHrs).HasColumnType("decimal(9,4)");
			config.Property(t => t.PlannedCost).HasColumnType("money");
			config.Property(t => t.ActualCost).HasColumnType("money");
			config.Property(t => t.ModifiedDate);
			config.HasOne(t => t.Location).WithMany(t => t.WorkOrderRoutings).HasForeignKey(t => t.LocationId);
			config.HasOne(t => t.WorkOrder).WithMany(t => t.WorkOrderRoutings).HasForeignKey(t => t.WorkOrderId);
		}
	}


	/// <summary>Extensions class for extension methods used in the model builder code</summary>
	internal static partial class AWModelBuilderExtensions
	{
		private static readonly string READONLY_ANNOTATION = "custom:readonly";

		/// <summary>Extension method which is used by the context class to determine whether an entity is readonly</summary>
		/// <typeparam name="TEntity">The type of the entity.</typeparam>
		/// <param name="builder">The entity type builder object to augment.</param>
		/// <returns>the passed in entity type builder</returns>
		internal static EntityTypeBuilder<TEntity> IsReadOnly<TEntity>(this EntityTypeBuilder<TEntity> builder)
			where TEntity : class
		{
			builder.HasAnnotation(READONLY_ANNOTATION, true);
			return builder;
		}
		
		/// <summary>Determines whether the passed in entity type has the readonly annotation set.
		/// </summary>
		/// <param name="entity">The entity type to check.</param>
		/// <returns>true if the entity type is marked as read-only, false otherwise</returns>
		public static bool IsReadOnly(this IEntityType entity)
		{
			var annotation = entity.FindAnnotation(READONLY_ANNOTATION);
			return annotation != null && (bool)annotation.Value;
		}
	}
}

